
ADCWEslave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003648  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800382c  0800382c  0001382c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003890  08003890  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  08003890  08003890  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003890  08003890  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003890  08003890  00013890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003894  08003894  00013894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08003898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000044  080038dc  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  080038dc  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc07  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021a8  00000000  00000000  0002cc74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d80  00000000  00000000  0002ee20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c48  00000000  00000000  0002fba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a0fe  00000000  00000000  000307e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ca59  00000000  00000000  0004a8e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099f19  00000000  00000000  0005733f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1258  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036ac  00000000  00000000  000f12d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000044 	.word	0x20000044
 8000200:	00000000 	.word	0x00000000
 8000204:	08003814 	.word	0x08003814

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000048 	.word	0x20000048
 8000220:	08003814 	.word	0x08003814

08000224 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000234:	4b27      	ldr	r3, [pc, #156]	; (80002d4 <MX_ADC1_Init+0xb0>)
 8000236:	4a28      	ldr	r2, [pc, #160]	; (80002d8 <MX_ADC1_Init+0xb4>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800023a:	4b26      	ldr	r3, [pc, #152]	; (80002d4 <MX_ADC1_Init+0xb0>)
 800023c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000240:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000242:	4b24      	ldr	r3, [pc, #144]	; (80002d4 <MX_ADC1_Init+0xb0>)
 8000244:	2201      	movs	r2, #1
 8000246:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000248:	4b22      	ldr	r3, [pc, #136]	; (80002d4 <MX_ADC1_Init+0xb0>)
 800024a:	2200      	movs	r2, #0
 800024c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800024e:	4b21      	ldr	r3, [pc, #132]	; (80002d4 <MX_ADC1_Init+0xb0>)
 8000250:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000254:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000256:	4b1f      	ldr	r3, [pc, #124]	; (80002d4 <MX_ADC1_Init+0xb0>)
 8000258:	2200      	movs	r2, #0
 800025a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 800025c:	4b1d      	ldr	r3, [pc, #116]	; (80002d4 <MX_ADC1_Init+0xb0>)
 800025e:	2203      	movs	r2, #3
 8000260:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000262:	481c      	ldr	r0, [pc, #112]	; (80002d4 <MX_ADC1_Init+0xb0>)
 8000264:	f000 fe18 	bl	8000e98 <HAL_ADC_Init>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800026e:	f000 fbab 	bl	80009c8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000272:	230a      	movs	r3, #10
 8000274:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000276:	2301      	movs	r3, #1
 8000278:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800027a:	2306      	movs	r3, #6
 800027c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	4619      	mov	r1, r3
 8000282:	4814      	ldr	r0, [pc, #80]	; (80002d4 <MX_ADC1_Init+0xb0>)
 8000284:	f000 ffe2 	bl	800124c <HAL_ADC_ConfigChannel>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800028e:	f000 fb9b 	bl	80009c8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000292:	230b      	movs	r3, #11
 8000294:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000296:	2302      	movs	r3, #2
 8000298:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4619      	mov	r1, r3
 800029e:	480d      	ldr	r0, [pc, #52]	; (80002d4 <MX_ADC1_Init+0xb0>)
 80002a0:	f000 ffd4 	bl	800124c <HAL_ADC_ConfigChannel>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80002aa:	f000 fb8d 	bl	80009c8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80002ae:	230c      	movs	r3, #12
 80002b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002b2:	2303      	movs	r3, #3
 80002b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4619      	mov	r1, r3
 80002ba:	4806      	ldr	r0, [pc, #24]	; (80002d4 <MX_ADC1_Init+0xb0>)
 80002bc:	f000 ffc6 	bl	800124c <HAL_ADC_ConfigChannel>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80002c6:	f000 fb7f 	bl	80009c8 <Error_Handler>
  }

}
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000080 	.word	0x20000080
 80002d8:	40012400 	.word	0x40012400

080002dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08a      	sub	sp, #40	; 0x28
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e4:	f107 0318 	add.w	r3, r7, #24
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a3f      	ldr	r2, [pc, #252]	; (80003f4 <HAL_ADC_MspInit+0x118>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d176      	bne.n	80003ea <HAL_ADC_MspInit+0x10e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002fc:	4b3e      	ldr	r3, [pc, #248]	; (80003f8 <HAL_ADC_MspInit+0x11c>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a3d      	ldr	r2, [pc, #244]	; (80003f8 <HAL_ADC_MspInit+0x11c>)
 8000302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b3b      	ldr	r3, [pc, #236]	; (80003f8 <HAL_ADC_MspInit+0x11c>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000310:	617b      	str	r3, [r7, #20]
 8000312:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000314:	4b38      	ldr	r3, [pc, #224]	; (80003f8 <HAL_ADC_MspInit+0x11c>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a37      	ldr	r2, [pc, #220]	; (80003f8 <HAL_ADC_MspInit+0x11c>)
 800031a:	f043 0310 	orr.w	r3, r3, #16
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b35      	ldr	r3, [pc, #212]	; (80003f8 <HAL_ADC_MspInit+0x11c>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0310 	and.w	r3, r3, #16
 8000328:	613b      	str	r3, [r7, #16]
 800032a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800032c:	4b32      	ldr	r3, [pc, #200]	; (80003f8 <HAL_ADC_MspInit+0x11c>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a31      	ldr	r2, [pc, #196]	; (80003f8 <HAL_ADC_MspInit+0x11c>)
 8000332:	f043 0304 	orr.w	r3, r3, #4
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b2f      	ldr	r3, [pc, #188]	; (80003f8 <HAL_ADC_MspInit+0x11c>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0304 	and.w	r3, r3, #4
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000344:	4b2c      	ldr	r3, [pc, #176]	; (80003f8 <HAL_ADC_MspInit+0x11c>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a2b      	ldr	r2, [pc, #172]	; (80003f8 <HAL_ADC_MspInit+0x11c>)
 800034a:	f043 0308 	orr.w	r3, r3, #8
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b29      	ldr	r3, [pc, #164]	; (80003f8 <HAL_ADC_MspInit+0x11c>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f003 0308 	and.w	r3, r3, #8
 8000358:	60bb      	str	r3, [r7, #8]
 800035a:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC0_Pin|ADC1_Pin|ADC2_Pin|ADC3_Pin
 800035c:	233f      	movs	r3, #63	; 0x3f
 800035e:	61bb      	str	r3, [r7, #24]
                          |ADC12_Pin|ADC13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000360:	2303      	movs	r3, #3
 8000362:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000364:	f107 0318 	add.w	r3, r7, #24
 8000368:	4619      	mov	r1, r3
 800036a:	4824      	ldr	r0, [pc, #144]	; (80003fc <HAL_ADC_MspInit+0x120>)
 800036c:	f001 fdb6 	bl	8001edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC4_Pin|ADC5_Pin|ADC6_Pin|ADC7_Pin
 8000370:	23ff      	movs	r3, #255	; 0xff
 8000372:	61bb      	str	r3, [r7, #24]
                          |ADC8_Pin|ADC9_Pin|ADC10_Pin|ADC11_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000374:	2303      	movs	r3, #3
 8000376:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000378:	f107 0318 	add.w	r3, r7, #24
 800037c:	4619      	mov	r1, r3
 800037e:	4820      	ldr	r0, [pc, #128]	; (8000400 <HAL_ADC_MspInit+0x124>)
 8000380:	f001 fdac 	bl	8001edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC14_Pin|ADC15_Pin;
 8000384:	2303      	movs	r3, #3
 8000386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000388:	2303      	movs	r3, #3
 800038a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800038c:	f107 0318 	add.w	r3, r7, #24
 8000390:	4619      	mov	r1, r3
 8000392:	481c      	ldr	r0, [pc, #112]	; (8000404 <HAL_ADC_MspInit+0x128>)
 8000394:	f001 fda2 	bl	8001edc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000398:	4b1b      	ldr	r3, [pc, #108]	; (8000408 <HAL_ADC_MspInit+0x12c>)
 800039a:	4a1c      	ldr	r2, [pc, #112]	; (800040c <HAL_ADC_MspInit+0x130>)
 800039c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800039e:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <HAL_ADC_MspInit+0x12c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80003a4:	4b18      	ldr	r3, [pc, #96]	; (8000408 <HAL_ADC_MspInit+0x12c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80003aa:	4b17      	ldr	r3, [pc, #92]	; (8000408 <HAL_ADC_MspInit+0x12c>)
 80003ac:	2280      	movs	r2, #128	; 0x80
 80003ae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80003b0:	4b15      	ldr	r3, [pc, #84]	; (8000408 <HAL_ADC_MspInit+0x12c>)
 80003b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80003b8:	4b13      	ldr	r3, [pc, #76]	; (8000408 <HAL_ADC_MspInit+0x12c>)
 80003ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80003c0:	4b11      	ldr	r3, [pc, #68]	; (8000408 <HAL_ADC_MspInit+0x12c>)
 80003c2:	2220      	movs	r2, #32
 80003c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80003c6:	4b10      	ldr	r3, [pc, #64]	; (8000408 <HAL_ADC_MspInit+0x12c>)
 80003c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003cc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80003ce:	480e      	ldr	r0, [pc, #56]	; (8000408 <HAL_ADC_MspInit+0x12c>)
 80003d0:	f001 fa44 	bl	800185c <HAL_DMA_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 80003da:	f000 faf5 	bl	80009c8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a09      	ldr	r2, [pc, #36]	; (8000408 <HAL_ADC_MspInit+0x12c>)
 80003e2:	621a      	str	r2, [r3, #32]
 80003e4:	4a08      	ldr	r2, [pc, #32]	; (8000408 <HAL_ADC_MspInit+0x12c>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003ea:	bf00      	nop
 80003ec:	3728      	adds	r7, #40	; 0x28
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40012400 	.word	0x40012400
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40011000 	.word	0x40011000
 8000400:	40010800 	.word	0x40010800
 8000404:	40010c00 	.word	0x40010c00
 8000408:	200000b0 	.word	0x200000b0
 800040c:	40020008 	.word	0x40020008

08000410 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000416:	4b1a      	ldr	r3, [pc, #104]	; (8000480 <MX_DMA_Init+0x70>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a19      	ldr	r2, [pc, #100]	; (8000480 <MX_DMA_Init+0x70>)
 800041c:	f043 0302 	orr.w	r3, r3, #2
 8000420:	6153      	str	r3, [r2, #20]
 8000422:	4b17      	ldr	r3, [pc, #92]	; (8000480 <MX_DMA_Init+0x70>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	f003 0302 	and.w	r3, r3, #2
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800042e:	4b14      	ldr	r3, [pc, #80]	; (8000480 <MX_DMA_Init+0x70>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a13      	ldr	r2, [pc, #76]	; (8000480 <MX_DMA_Init+0x70>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	6153      	str	r3, [r2, #20]
 800043a:	4b11      	ldr	r3, [pc, #68]	; (8000480 <MX_DMA_Init+0x70>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	603b      	str	r3, [r7, #0]
 8000444:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	2101      	movs	r1, #1
 800044a:	200b      	movs	r0, #11
 800044c:	f001 f9cf 	bl	80017ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000450:	200b      	movs	r0, #11
 8000452:	f001 f9e8 	bl	8001826 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 1, 0);
 8000456:	2200      	movs	r2, #0
 8000458:	2101      	movs	r1, #1
 800045a:	2038      	movs	r0, #56	; 0x38
 800045c:	f001 f9c7 	bl	80017ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000460:	2038      	movs	r0, #56	; 0x38
 8000462:	f001 f9e0 	bl	8001826 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 1, 0);
 8000466:	2200      	movs	r2, #0
 8000468:	2101      	movs	r1, #1
 800046a:	2039      	movs	r0, #57	; 0x39
 800046c:	f001 f9bf 	bl	80017ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000470:	2039      	movs	r0, #57	; 0x39
 8000472:	f001 f9d8 	bl	8001826 <HAL_NVIC_EnableIRQ>

}
 8000476:	bf00      	nop
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000

08000484 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	f107 0310 	add.w	r3, r7, #16
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <MX_GPIO_Init+0xcc>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a2c      	ldr	r2, [pc, #176]	; (8000550 <MX_GPIO_Init+0xcc>)
 800049e:	f043 0320 	orr.w	r3, r3, #32
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b2a      	ldr	r3, [pc, #168]	; (8000550 <MX_GPIO_Init+0xcc>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0320 	and.w	r3, r3, #32
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b0:	4b27      	ldr	r3, [pc, #156]	; (8000550 <MX_GPIO_Init+0xcc>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a26      	ldr	r2, [pc, #152]	; (8000550 <MX_GPIO_Init+0xcc>)
 80004b6:	f043 0310 	orr.w	r3, r3, #16
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b24      	ldr	r3, [pc, #144]	; (8000550 <MX_GPIO_Init+0xcc>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0310 	and.w	r3, r3, #16
 80004c4:	60bb      	str	r3, [r7, #8]
 80004c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c8:	4b21      	ldr	r3, [pc, #132]	; (8000550 <MX_GPIO_Init+0xcc>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a20      	ldr	r2, [pc, #128]	; (8000550 <MX_GPIO_Init+0xcc>)
 80004ce:	f043 0304 	orr.w	r3, r3, #4
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b1e      	ldr	r3, [pc, #120]	; (8000550 <MX_GPIO_Init+0xcc>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0304 	and.w	r3, r3, #4
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e0:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <MX_GPIO_Init+0xcc>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a1a      	ldr	r2, [pc, #104]	; (8000550 <MX_GPIO_Init+0xcc>)
 80004e6:	f043 0308 	orr.w	r3, r3, #8
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b18      	ldr	r3, [pc, #96]	; (8000550 <MX_GPIO_Init+0xcc>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0308 	and.w	r3, r3, #8
 80004f4:	603b      	str	r3, [r7, #0]
 80004f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = WE_0A_Pin|WE_0B_Pin|WE_1A_Pin|WE_1B_Pin
 80004f8:	f64f 4304 	movw	r3, #64516	; 0xfc04
 80004fc:	613b      	str	r3, [r7, #16]
                          |WE_2A_Pin|WE_2B_Pin|WE_3A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4619      	mov	r1, r3
 800050c:	4811      	ldr	r0, [pc, #68]	; (8000554 <MX_GPIO_Init+0xd0>)
 800050e:	f001 fce5 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = WE_3B_Pin|WE_4A_Pin|WE_4B_Pin|WE_5A_Pin;
 8000512:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	4619      	mov	r1, r3
 8000526:	480c      	ldr	r0, [pc, #48]	; (8000558 <MX_GPIO_Init+0xd4>)
 8000528:	f001 fcd8 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = WE_5B_Pin|WE_6A_Pin|WE_6B_Pin|WE_7A_Pin
 800052c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000530:	613b      	str	r3, [r7, #16]
                          |WE_7B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	4619      	mov	r1, r3
 8000540:	4806      	ldr	r0, [pc, #24]	; (800055c <MX_GPIO_Init+0xd8>)
 8000542:	f001 fccb 	bl	8001edc <HAL_GPIO_Init>

}
 8000546:	bf00      	nop
 8000548:	3720      	adds	r7, #32
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000
 8000554:	40010c00 	.word	0x40010c00
 8000558:	40011000 	.word	0x40011000
 800055c:	40010800 	.word	0x40010800

08000560 <set_state>:
//  for (uint8_t idx = 0; idx < src_size; idx++) {
//    dest_buffer[idx] = src_buffer[idx];
//  }
//}

static inline void set_state(uint8_t command_idx) {
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
  switch (command_idx) {
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	2bfc      	cmp	r3, #252	; 0xfc
 800056e:	d008      	beq.n	8000582 <set_state+0x22>
 8000570:	2bfd      	cmp	r3, #253	; 0xfd
 8000572:	d002      	beq.n	800057a <set_state+0x1a>
 8000574:	2bfb      	cmp	r3, #251	; 0xfb
 8000576:	d008      	beq.n	800058a <set_state+0x2a>
 8000578:	e00b      	b.n	8000592 <set_state+0x32>
    case 0xFD: //11111101, 253
      slave_state = WIREENCODER;
 800057a:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <set_state+0x44>)
 800057c:	2202      	movs	r2, #2
 800057e:	701a      	strb	r2, [r3, #0]
      break;
 8000580:	e00a      	b.n	8000598 <set_state+0x38>

    case 0xFC: //11111100, 252
          slave_state = AIRPRESSURE;
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <set_state+0x44>)
 8000584:	2201      	movs	r2, #1
 8000586:	701a      	strb	r2, [r3, #0]
          break;
 8000588:	e006      	b.n	8000598 <set_state+0x38>

    case 0xFB: //11111011, 252
      slave_state = CHECKING_SPI;
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <set_state+0x44>)
 800058c:	2204      	movs	r2, #4
 800058e:	701a      	strb	r2, [r3, #0]
      break;
 8000590:	e002      	b.n	8000598 <set_state+0x38>

    default:
      slave_state = READ_CONFIG;
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <set_state+0x44>)
 8000594:	2203      	movs	r2, #3
 8000596:	701a      	strb	r2, [r3, #0]
  }
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000010 	.word	0x20000010

080005a8 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI3) {
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a0c      	ldr	r2, [pc, #48]	; (80005e8 <HAL_SPI_TxRxCpltCallback+0x40>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d108      	bne.n	80005cc <HAL_SPI_TxRxCpltCallback+0x24>
//		tx_buffer[7] = slave_state;
		HAL_SPI_TransmitReceive_DMA(&hspi3, tx_buffer, rx_buffer, BUFFER_SIZE_SPI3);
 80005ba:	2308      	movs	r3, #8
 80005bc:	4a0b      	ldr	r2, [pc, #44]	; (80005ec <HAL_SPI_TxRxCpltCallback+0x44>)
 80005be:	490c      	ldr	r1, [pc, #48]	; (80005f0 <HAL_SPI_TxRxCpltCallback+0x48>)
 80005c0:	480c      	ldr	r0, [pc, #48]	; (80005f4 <HAL_SPI_TxRxCpltCallback+0x4c>)
 80005c2:	f002 fb33 	bl	8002c2c <HAL_SPI_TransmitReceive_DMA>
        buffer_updated = 1;
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <HAL_SPI_TxRxCpltCallback+0x50>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	701a      	strb	r2, [r3, #0]
//        tx_buffer[0] = rx_buffer[0];
	}
	set_state(rx_buffer[0]);
 80005cc:	4b07      	ldr	r3, [pc, #28]	; (80005ec <HAL_SPI_TxRxCpltCallback+0x44>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ffc5 	bl	8000560 <set_state>
	count++;
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <HAL_SPI_TxRxCpltCallback+0x54>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	3301      	adds	r3, #1
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <HAL_SPI_TxRxCpltCallback+0x54>)
 80005de:	6013      	str	r3, [r2, #0]
//	if(count >= 10000){
//		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, Led);
//		Led = 1 - Led;
//		count = 0;
//	}
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40003c00 	.word	0x40003c00
 80005ec:	20000008 	.word	0x20000008
 80005f0:	20000000 	.word	0x20000000
 80005f4:	20000100 	.word	0x20000100
 80005f8:	20000060 	.word	0x20000060
 80005fc:	20000078 	.word	0x20000078

08000600 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000600:	b5b0      	push	{r4, r5, r7, lr}
 8000602:	b092      	sub	sp, #72	; 0x48
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (htim == &htim6){
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a42      	ldr	r2, [pc, #264]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d17d      	bne.n	800070c <HAL_TIM_PeriodElapsedCallback+0x10c>
		int d[16]={0,-1,1,0,1,0,0,-1,-1,0,0,1,0,1,-1,0}; //1:cw, -1:ccw, 0:none
 8000610:	4b41      	ldr	r3, [pc, #260]	; (8000718 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000612:	f107 0408 	add.w	r4, r7, #8
 8000616:	461d      	mov	r5, r3
 8000618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000624:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		for(i = 0; i < ENCODER_NUMBER; i++){
 800062c:	4b3b      	ldr	r3, [pc, #236]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	e067      	b.n	8000704 <HAL_TIM_PeriodElapsedCallback+0x104>
			readpin[i] = (HAL_GPIO_ReadPin(ENC_infos[i].A_port, ENC_infos[i].A_pin) << 1) | HAL_GPIO_ReadPin(ENC_infos[i].B_port, ENC_infos[i].B_pin);
 8000634:	4b39      	ldr	r3, [pc, #228]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	4939      	ldr	r1, [pc, #228]	; (8000720 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800063a:	4613      	mov	r3, r2
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	4413      	add	r3, r2
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	440b      	add	r3, r1
 8000644:	3304      	adds	r3, #4
 8000646:	6818      	ldr	r0, [r3, #0]
 8000648:	4b34      	ldr	r3, [pc, #208]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	4934      	ldr	r1, [pc, #208]	; (8000720 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800064e:	4613      	mov	r3, r2
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	4413      	add	r3, r2
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	440b      	add	r3, r1
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	4619      	mov	r1, r3
 800065c:	f001 fda8 	bl	80021b0 <HAL_GPIO_ReadPin>
 8000660:	4603      	mov	r3, r0
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	b25c      	sxtb	r4, r3
 8000666:	4b2d      	ldr	r3, [pc, #180]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	492d      	ldr	r1, [pc, #180]	; (8000720 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800066c:	4613      	mov	r3, r2
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	4413      	add	r3, r2
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	440b      	add	r3, r1
 8000676:	3308      	adds	r3, #8
 8000678:	6818      	ldr	r0, [r3, #0]
 800067a:	4b28      	ldr	r3, [pc, #160]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	4928      	ldr	r1, [pc, #160]	; (8000720 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000680:	4613      	mov	r3, r2
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	4413      	add	r3, r2
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	440b      	add	r3, r1
 800068a:	3302      	adds	r3, #2
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	4619      	mov	r1, r3
 8000690:	f001 fd8e 	bl	80021b0 <HAL_GPIO_ReadPin>
 8000694:	4603      	mov	r3, r0
 8000696:	b25b      	sxtb	r3, r3
 8000698:	4323      	orrs	r3, r4
 800069a:	b25a      	sxtb	r2, r3
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	b2d1      	uxtb	r1, r2
 80006a2:	4a20      	ldr	r2, [pc, #128]	; (8000724 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80006a4:	54d1      	strb	r1, [r2, r3]
			pointer_ENC[i] = (pointer_ENC[i] <<2 | readpin[i]) & 0x0f;
 80006a6:	4b1d      	ldr	r3, [pc, #116]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a1f      	ldr	r2, [pc, #124]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80006ac:	5cd3      	ldrb	r3, [r2, r3]
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	b25a      	sxtb	r2, r3
 80006b2:	4b1a      	ldr	r3, [pc, #104]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	491b      	ldr	r1, [pc, #108]	; (8000724 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80006b8:	5ccb      	ldrb	r3, [r1, r3]
 80006ba:	b25b      	sxtb	r3, r3
 80006bc:	4313      	orrs	r3, r2
 80006be:	b25b      	sxtb	r3, r3
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f002 020f 	and.w	r2, r2, #15
 80006ca:	b2d1      	uxtb	r1, r2
 80006cc:	4a16      	ldr	r2, [pc, #88]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80006ce:	54d1      	strb	r1, [r2, r3]
			WireLength[i] += d[pointer_ENC[i]];
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a15      	ldr	r2, [pc, #84]	; (800072c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80006d6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a12      	ldr	r2, [pc, #72]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80006e0:	5cd3      	ldrb	r3, [r2, r3]
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80006e8:	4413      	add	r3, r2
 80006ea:	f853 2c40 	ldr.w	r2, [r3, #-64]
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	440a      	add	r2, r1
 80006f4:	490d      	ldr	r1, [pc, #52]	; (800072c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80006f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(i = 0; i < ENCODER_NUMBER; i++){
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	3301      	adds	r3, #1
 8000700:	4a06      	ldr	r2, [pc, #24]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b02      	cmp	r3, #2
 800070a:	dd93      	ble.n	8000634 <HAL_TIM_PeriodElapsedCallback+0x34>
//		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, Led);
//		Led = 1 - Led;
//		count2 = 0;
//	}
//	count2++;
}
 800070c:	bf00      	nop
 800070e:	3748      	adds	r7, #72	; 0x48
 8000710:	46bd      	mov	sp, r7
 8000712:	bdb0      	pop	{r4, r5, r7, pc}
 8000714:	200001e0 	.word	0x200001e0
 8000718:	0800382c 	.word	0x0800382c
 800071c:	200000f4 	.word	0x200000f4
 8000720:	20000014 	.word	0x20000014
 8000724:	20000074 	.word	0x20000074
 8000728:	20000070 	.word	0x20000070
 800072c:	20000064 	.word	0x20000064

08000730 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  //After AD Convert
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
	...

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000748:	f000 fb44 	bl	8000dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074c:	f000 f8de 	bl	800090c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000750:	f7ff fe98 	bl	8000484 <MX_GPIO_Init>
  MX_DMA_Init();
 8000754:	f7ff fe5c 	bl	8000410 <MX_DMA_Init>
  MX_SPI3_Init();
 8000758:	f000 f93c 	bl	80009d4 <MX_SPI3_Init>
  MX_ADC1_Init();
 800075c:	f7ff fd62 	bl	8000224 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000760:	f000 fab8 	bl	8000cd4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000764:	485e      	ldr	r0, [pc, #376]	; (80008e0 <main+0x19c>)
 8000766:	f002 fda5 	bl	80032b4 <HAL_TIM_Base_Start_IT>
//  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_SPI_TransmitReceive_DMA(&hspi3, tx_buffer, rx_buffer, BUFFER_SIZE_SPI3);
 800076a:	2308      	movs	r3, #8
 800076c:	4a5d      	ldr	r2, [pc, #372]	; (80008e4 <main+0x1a0>)
 800076e:	495e      	ldr	r1, [pc, #376]	; (80008e8 <main+0x1a4>)
 8000770:	485e      	ldr	r0, [pc, #376]	; (80008ec <main+0x1a8>)
 8000772:	f002 fa5b 	bl	8002c2c <HAL_SPI_TransmitReceive_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_NUMBER);
 8000776:	2203      	movs	r2, #3
 8000778:	495d      	ldr	r1, [pc, #372]	; (80008f0 <main+0x1ac>)
 800077a:	485e      	ldr	r0, [pc, #376]	; (80008f4 <main+0x1b0>)
 800077c:	f000 fc76 	bl	800106c <HAL_ADC_Start_DMA>
  while (1)
  {
	  count2++;
 8000780:	4b5d      	ldr	r3, [pc, #372]	; (80008f8 <main+0x1b4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	3301      	adds	r3, #1
 8000786:	4a5c      	ldr	r2, [pc, #368]	; (80008f8 <main+0x1b4>)
 8000788:	6013      	str	r3, [r2, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(slave_state) {
 800078a:	4b5c      	ldr	r3, [pc, #368]	; (80008fc <main+0x1b8>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	3b01      	subs	r3, #1
 8000790:	2b03      	cmp	r3, #3
 8000792:	d8f5      	bhi.n	8000780 <main+0x3c>
 8000794:	a201      	add	r2, pc, #4	; (adr r2, 800079c <main+0x58>)
 8000796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079a:	bf00      	nop
 800079c:	08000873 	.word	0x08000873
 80007a0:	080007f5 	.word	0x080007f5
 80007a4:	080007ad 	.word	0x080007ad
 80007a8:	080007bf 	.word	0x080007bf
		  case READ_CONFIG:
//	  			  copy_buffer(tx_buffer, BUFFER_SIZE_SPI1, rx_buffer, BUFFER_SIZE_SPI1);
			  if (buffer_updated == 1) {
 80007ac:	4b54      	ldr	r3, [pc, #336]	; (8000900 <main+0x1bc>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	f040 808c 	bne.w	80008ce <main+0x18a>
				  buffer_updated = 0;
 80007b6:	4b52      	ldr	r3, [pc, #328]	; (8000900 <main+0x1bc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 80007bc:	e087      	b.n	80008ce <main+0x18a>

		  case CHECKING_SPI:
//	  			  copy_buffer(tx_buffer, BUFFER_SIZE_SPI1, rx_buffer, BUFFER_SIZE_SPI1);
//	  			  tx_buffer[0] = rx_buffer[0];
			  if (buffer_updated == 1) {
 80007be:	4b50      	ldr	r3, [pc, #320]	; (8000900 <main+0x1bc>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	f040 8085 	bne.w	80008d2 <main+0x18e>
				  buffer_updated = 0;
 80007c8:	4b4d      	ldr	r3, [pc, #308]	; (8000900 <main+0x1bc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
  //				  tx_buffer[2] = 0x00;
  //				  tx_buffer[3] = 0x00;
  //				  tx_buffer[4] = 0x00;
  //				  tx_buffer[5] = 0x00;
  //				  tx_buffer[6] = 0x00;
				  tx_buffer[1] = 0xfc;
 80007ce:	4b46      	ldr	r3, [pc, #280]	; (80008e8 <main+0x1a4>)
 80007d0:	22fc      	movs	r2, #252	; 0xfc
 80007d2:	705a      	strb	r2, [r3, #1]
				  tx_buffer[2] = 0xfc;
 80007d4:	4b44      	ldr	r3, [pc, #272]	; (80008e8 <main+0x1a4>)
 80007d6:	22fc      	movs	r2, #252	; 0xfc
 80007d8:	709a      	strb	r2, [r3, #2]
				  tx_buffer[3] = 0xfc;
 80007da:	4b43      	ldr	r3, [pc, #268]	; (80008e8 <main+0x1a4>)
 80007dc:	22fc      	movs	r2, #252	; 0xfc
 80007de:	70da      	strb	r2, [r3, #3]
				  tx_buffer[4] = 0xfc;
 80007e0:	4b41      	ldr	r3, [pc, #260]	; (80008e8 <main+0x1a4>)
 80007e2:	22fc      	movs	r2, #252	; 0xfc
 80007e4:	711a      	strb	r2, [r3, #4]
				  tx_buffer[5] = 0xfc;
 80007e6:	4b40      	ldr	r3, [pc, #256]	; (80008e8 <main+0x1a4>)
 80007e8:	22fc      	movs	r2, #252	; 0xfc
 80007ea:	715a      	strb	r2, [r3, #5]
				  tx_buffer[6] = 0xfc;
 80007ec:	4b3e      	ldr	r3, [pc, #248]	; (80008e8 <main+0x1a4>)
 80007ee:	22fc      	movs	r2, #252	; 0xfc
 80007f0:	719a      	strb	r2, [r3, #6]
			  }
			  break;
 80007f2:	e06e      	b.n	80008d2 <main+0x18e>
		  case WIREENCODER:
			  if (buffer_updated == 1) {
 80007f4:	4b42      	ldr	r3, [pc, #264]	; (8000900 <main+0x1bc>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d16c      	bne.n	80008d6 <main+0x192>
//	  				copy_buffer(tx_buffer, BUFFER_SIZE_SPI1, rx_buffer, BUFFER_SIZE_SPI1);
				//tx_buffer[0] = rx_buffer[0];
  //				  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
  //				  uint8_t L1 = 0; uint8_t L2 = 0;
				  for(i = 0; i < ENCODER_NUMBER; i++){
 80007fc:	4b41      	ldr	r3, [pc, #260]	; (8000904 <main+0x1c0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	e02e      	b.n	8000862 <main+0x11e>
					  if(WireLength[0] >= 0){
 8000804:	4b40      	ldr	r3, [pc, #256]	; (8000908 <main+0x1c4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	db18      	blt.n	800083e <main+0xfa>
						  tx_buffer[2*i] = WireLength[i] >> 8;
 800080c:	4b3d      	ldr	r3, [pc, #244]	; (8000904 <main+0x1c0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a3d      	ldr	r2, [pc, #244]	; (8000908 <main+0x1c4>)
 8000812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000816:	121a      	asrs	r2, r3, #8
 8000818:	4b3a      	ldr	r3, [pc, #232]	; (8000904 <main+0x1c0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	b2d1      	uxtb	r1, r2
 8000820:	4a31      	ldr	r2, [pc, #196]	; (80008e8 <main+0x1a4>)
 8000822:	54d1      	strb	r1, [r2, r3]
						  tx_buffer[2*i+1] = WireLength[i];
 8000824:	4b37      	ldr	r3, [pc, #220]	; (8000904 <main+0x1c0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a37      	ldr	r2, [pc, #220]	; (8000908 <main+0x1c4>)
 800082a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800082e:	4b35      	ldr	r3, [pc, #212]	; (8000904 <main+0x1c0>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	3301      	adds	r3, #1
 8000836:	b2d1      	uxtb	r1, r2
 8000838:	4a2b      	ldr	r2, [pc, #172]	; (80008e8 <main+0x1a4>)
 800083a:	54d1      	strb	r1, [r2, r3]
 800083c:	e00c      	b.n	8000858 <main+0x114>
					  }
					  else{
						  tx_buffer[2*i] = 0;
 800083e:	4b31      	ldr	r3, [pc, #196]	; (8000904 <main+0x1c0>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	4a28      	ldr	r2, [pc, #160]	; (80008e8 <main+0x1a4>)
 8000846:	2100      	movs	r1, #0
 8000848:	54d1      	strb	r1, [r2, r3]
						  tx_buffer[2*i+1] = 0;
 800084a:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <main+0x1c0>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	3301      	adds	r3, #1
 8000852:	4a25      	ldr	r2, [pc, #148]	; (80008e8 <main+0x1a4>)
 8000854:	2100      	movs	r1, #0
 8000856:	54d1      	strb	r1, [r2, r3]
				  for(i = 0; i < ENCODER_NUMBER; i++){
 8000858:	4b2a      	ldr	r3, [pc, #168]	; (8000904 <main+0x1c0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	3301      	adds	r3, #1
 800085e:	4a29      	ldr	r2, [pc, #164]	; (8000904 <main+0x1c0>)
 8000860:	6013      	str	r3, [r2, #0]
 8000862:	4b28      	ldr	r3, [pc, #160]	; (8000904 <main+0x1c0>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b02      	cmp	r3, #2
 8000868:	ddcc      	ble.n	8000804 <main+0xc0>
					  }
				  }
				  buffer_updated = 0;
 800086a:	4b25      	ldr	r3, [pc, #148]	; (8000900 <main+0x1bc>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 8000870:	e031      	b.n	80008d6 <main+0x192>
		  case AIRPRESSURE:
//	  			  copy_buffer(tx_buffer, BUFFER_SIZE_SPI1, rx_buffer, BUFFER_SIZE_SPI1);
			  for(i = 0; i < ADC_NUMBER; i++){
 8000872:	4b24      	ldr	r3, [pc, #144]	; (8000904 <main+0x1c0>)
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	e01d      	b.n	80008b6 <main+0x172>
				  tx_buffer[2*i] = (uint8_t)(adc_buffer[i] >> 8);
 800087a:	4b22      	ldr	r3, [pc, #136]	; (8000904 <main+0x1c0>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a1c      	ldr	r2, [pc, #112]	; (80008f0 <main+0x1ac>)
 8000880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000884:	0a1b      	lsrs	r3, r3, #8
 8000886:	b29a      	uxth	r2, r3
 8000888:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <main+0x1c0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	b2d1      	uxtb	r1, r2
 8000890:	4a15      	ldr	r2, [pc, #84]	; (80008e8 <main+0x1a4>)
 8000892:	54d1      	strb	r1, [r2, r3]
				  tx_buffer[2*i+1] = (uint8_t)adc_buffer[i];
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <main+0x1c0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a15      	ldr	r2, [pc, #84]	; (80008f0 <main+0x1ac>)
 800089a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <main+0x1c0>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	3301      	adds	r3, #1
 80008a6:	b2d1      	uxtb	r1, r2
 80008a8:	4a0f      	ldr	r2, [pc, #60]	; (80008e8 <main+0x1a4>)
 80008aa:	54d1      	strb	r1, [r2, r3]
			  for(i = 0; i < ADC_NUMBER; i++){
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <main+0x1c0>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	3301      	adds	r3, #1
 80008b2:	4a14      	ldr	r2, [pc, #80]	; (8000904 <main+0x1c0>)
 80008b4:	6013      	str	r3, [r2, #0]
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <main+0x1c0>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	dddd      	ble.n	800087a <main+0x136>
			  }
			  if (buffer_updated == 1) {
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <main+0x1bc>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d109      	bne.n	80008da <main+0x196>
				  buffer_updated = 0;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <main+0x1bc>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 80008cc:	e005      	b.n	80008da <main+0x196>
			  break;
 80008ce:	bf00      	nop
 80008d0:	e756      	b.n	8000780 <main+0x3c>
			  break;
 80008d2:	bf00      	nop
 80008d4:	e754      	b.n	8000780 <main+0x3c>
			  break;
 80008d6:	bf00      	nop
 80008d8:	e752      	b.n	8000780 <main+0x3c>
			  break;
 80008da:	bf00      	nop
	  count2++;
 80008dc:	e750      	b.n	8000780 <main+0x3c>
 80008de:	bf00      	nop
 80008e0:	200001e0 	.word	0x200001e0
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000000 	.word	0x20000000
 80008ec:	20000100 	.word	0x20000100
 80008f0:	200000f8 	.word	0x200000f8
 80008f4:	20000080 	.word	0x20000080
 80008f8:	2000007c 	.word	0x2000007c
 80008fc:	20000010 	.word	0x20000010
 8000900:	20000060 	.word	0x20000060
 8000904:	200000f4 	.word	0x200000f4
 8000908:	20000064 	.word	0x20000064

0800090c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b096      	sub	sp, #88	; 0x58
 8000910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000912:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000916:	2228      	movs	r2, #40	; 0x28
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f002 ff72 	bl	8003804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]
 800093e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000940:	2301      	movs	r3, #1
 8000942:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000944:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000948:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800094a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800094e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000950:	2301      	movs	r3, #1
 8000952:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000954:	2302      	movs	r3, #2
 8000956:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000958:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800095c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800095e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000962:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000964:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000968:	4618      	mov	r0, r3
 800096a:	f001 fc39 	bl	80021e0 <HAL_RCC_OscConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000974:	f000 f828 	bl	80009c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000978:	230f      	movs	r3, #15
 800097a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097c:	2302      	movs	r3, #2
 800097e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	2102      	movs	r1, #2
 8000994:	4618      	mov	r0, r3
 8000996:	f001 fea3 	bl	80026e0 <HAL_RCC_ClockConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009a0:	f000 f812 	bl	80009c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009a4:	2302      	movs	r3, #2
 80009a6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80009a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009ac:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 f801 	bl	80029b8 <HAL_RCCEx_PeriphCLKConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009bc:	f000 f804 	bl	80009c8 <Error_Handler>
  }
}
 80009c0:	bf00      	nop
 80009c2:	3758      	adds	r7, #88	; 0x58
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <MX_SPI3_Init>:
DMA_HandleTypeDef hdma_spi3_tx;
DMA_HandleTypeDef hdma_spi3_rx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80009d8:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_SPI3_Init+0x60>)
 80009da:	4a17      	ldr	r2, [pc, #92]	; (8000a38 <MX_SPI3_Init+0x64>)
 80009dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_SPI3_Init+0x60>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_SPI3_Init+0x60>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_SPI3_Init+0x60>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f0:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_SPI3_Init+0x60>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_SPI3_Init+0x60>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <MX_SPI3_Init+0x60>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_SPI3_Init+0x60>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <MX_SPI3_Init+0x60>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_SPI3_Init+0x60>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <MX_SPI3_Init+0x60>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_SPI3_Init+0x60>)
 8000a1c:	220a      	movs	r2, #10
 8000a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MX_SPI3_Init+0x60>)
 8000a22:	f002 f87f 	bl	8002b24 <HAL_SPI_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_SPI3_Init+0x5c>
  {
    Error_Handler();
 8000a2c:	f7ff ffcc 	bl	80009c8 <Error_Handler>
  }

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000100 	.word	0x20000100
 8000a38:	40003c00 	.word	0x40003c00

08000a3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	; 0x28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0318 	add.w	r3, r7, #24
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI3)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a4f      	ldr	r2, [pc, #316]	; (8000b94 <HAL_SPI_MspInit+0x158>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	f040 8097 	bne.w	8000b8c <HAL_SPI_MspInit+0x150>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a5e:	4b4e      	ldr	r3, [pc, #312]	; (8000b98 <HAL_SPI_MspInit+0x15c>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	4a4d      	ldr	r2, [pc, #308]	; (8000b98 <HAL_SPI_MspInit+0x15c>)
 8000a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a68:	61d3      	str	r3, [r2, #28]
 8000a6a:	4b4b      	ldr	r3, [pc, #300]	; (8000b98 <HAL_SPI_MspInit+0x15c>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	4b48      	ldr	r3, [pc, #288]	; (8000b98 <HAL_SPI_MspInit+0x15c>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	4a47      	ldr	r2, [pc, #284]	; (8000b98 <HAL_SPI_MspInit+0x15c>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	6193      	str	r3, [r2, #24]
 8000a82:	4b45      	ldr	r3, [pc, #276]	; (8000b98 <HAL_SPI_MspInit+0x15c>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	4b42      	ldr	r3, [pc, #264]	; (8000b98 <HAL_SPI_MspInit+0x15c>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	4a41      	ldr	r2, [pc, #260]	; (8000b98 <HAL_SPI_MspInit+0x15c>)
 8000a94:	f043 0308 	orr.w	r3, r3, #8
 8000a98:	6193      	str	r3, [r2, #24]
 8000a9a:	4b3f      	ldr	r3, [pc, #252]	; (8000b98 <HAL_SPI_MspInit+0x15c>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	f003 0308 	and.w	r3, r3, #8
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    PA15     ------> SPI3_NSS
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 0318 	add.w	r3, r7, #24
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4838      	ldr	r0, [pc, #224]	; (8000b9c <HAL_SPI_MspInit+0x160>)
 8000abc:	f001 fa0e 	bl	8001edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000ac0:	2328      	movs	r3, #40	; 0x28
 8000ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0318 	add.w	r3, r7, #24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4833      	ldr	r0, [pc, #204]	; (8000ba0 <HAL_SPI_MspInit+0x164>)
 8000ad4:	f001 fa02 	bl	8001edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ad8:	2310      	movs	r3, #16
 8000ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 0318 	add.w	r3, r7, #24
 8000ae8:	4619      	mov	r1, r3
 8000aea:	482d      	ldr	r0, [pc, #180]	; (8000ba0 <HAL_SPI_MspInit+0x164>)
 8000aec:	f001 f9f6 	bl	8001edc <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8000af0:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <HAL_SPI_MspInit+0x168>)
 8000af2:	4a2d      	ldr	r2, [pc, #180]	; (8000ba8 <HAL_SPI_MspInit+0x16c>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000af6:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <HAL_SPI_MspInit+0x168>)
 8000af8:	2210      	movs	r2, #16
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000afc:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <HAL_SPI_MspInit+0x168>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b02:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <HAL_SPI_MspInit+0x168>)
 8000b04:	2280      	movs	r2, #128	; 0x80
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b08:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <HAL_SPI_MspInit+0x168>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b0e:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <HAL_SPI_MspInit+0x168>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000b14:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <HAL_SPI_MspInit+0x168>)
 8000b16:	2220      	movs	r2, #32
 8000b18:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b1a:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <HAL_SPI_MspInit+0x168>)
 8000b1c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000b20:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000b22:	4820      	ldr	r0, [pc, #128]	; (8000ba4 <HAL_SPI_MspInit+0x168>)
 8000b24:	f000 fe9a 	bl	800185c <HAL_DMA_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <HAL_SPI_MspInit+0xf6>
    {
      Error_Handler();
 8000b2e:	f7ff ff4b 	bl	80009c8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a1b      	ldr	r2, [pc, #108]	; (8000ba4 <HAL_SPI_MspInit+0x168>)
 8000b36:	649a      	str	r2, [r3, #72]	; 0x48
 8000b38:	4a1a      	ldr	r2, [pc, #104]	; (8000ba4 <HAL_SPI_MspInit+0x168>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA2_Channel1;
 8000b3e:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <HAL_SPI_MspInit+0x170>)
 8000b40:	4a1b      	ldr	r2, [pc, #108]	; (8000bb0 <HAL_SPI_MspInit+0x174>)
 8000b42:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b44:	4b19      	ldr	r3, [pc, #100]	; (8000bac <HAL_SPI_MspInit+0x170>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_SPI_MspInit+0x170>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <HAL_SPI_MspInit+0x170>)
 8000b52:	2280      	movs	r2, #128	; 0x80
 8000b54:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_SPI_MspInit+0x170>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <HAL_SPI_MspInit+0x170>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8000b62:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_SPI_MspInit+0x170>)
 8000b64:	2220      	movs	r2, #32
 8000b66:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b68:	4b10      	ldr	r3, [pc, #64]	; (8000bac <HAL_SPI_MspInit+0x170>)
 8000b6a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000b6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8000b70:	480e      	ldr	r0, [pc, #56]	; (8000bac <HAL_SPI_MspInit+0x170>)
 8000b72:	f000 fe73 	bl	800185c <HAL_DMA_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <HAL_SPI_MspInit+0x144>
    {
      Error_Handler();
 8000b7c:	f7ff ff24 	bl	80009c8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <HAL_SPI_MspInit+0x170>)
 8000b84:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b86:	4a09      	ldr	r2, [pc, #36]	; (8000bac <HAL_SPI_MspInit+0x170>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40003c00 	.word	0x40003c00
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40010800 	.word	0x40010800
 8000ba0:	40010c00 	.word	0x40010c00
 8000ba4:	20000158 	.word	0x20000158
 8000ba8:	4002041c 	.word	0x4002041c
 8000bac:	2000019c 	.word	0x2000019c
 8000bb0:	40020408 	.word	0x40020408

08000bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_MspInit+0x68>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <HAL_MspInit+0x68>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6193      	str	r3, [r2, #24]
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_MspInit+0x68>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_MspInit+0x68>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	4a11      	ldr	r2, [pc, #68]	; (8000c1c <HAL_MspInit+0x68>)
 8000bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	61d3      	str	r3, [r2, #28]
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <HAL_MspInit+0x68>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2101      	movs	r1, #1
 8000bee:	f06f 0003 	mvn.w	r0, #3
 8000bf2:	f000 fdfc 	bl	80017ee <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_MspInit+0x6c>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <HAL_MspInit+0x6c>)
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40010000 	.word	0x40010000

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <HardFault_Handler+0x4>

08000c36 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <MemManage_Handler+0x4>

08000c3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <BusFault_Handler+0x4>

08000c42 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <UsageFault_Handler+0x4>

08000c48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c70:	f000 f8f6 	bl	8000e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <DMA1_Channel1_IRQHandler+0x10>)
 8000c7e:	f000 fec3 	bl	8001a08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200000b0 	.word	0x200000b0

08000c8c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <TIM6_IRQHandler+0x10>)
 8000c92:	f002 fb6f 	bl	8003374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200001e0 	.word	0x200001e0

08000ca0 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <DMA2_Channel1_IRQHandler+0x10>)
 8000ca6:	f000 feaf 	bl	8001a08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	2000019c 	.word	0x2000019c

08000cb4 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <DMA2_Channel2_IRQHandler+0x10>)
 8000cba:	f000 fea5 	bl	8001a08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000158 	.word	0x20000158

08000cc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cda:	463b      	mov	r3, r7
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <MX_TIM6_Init+0x60>)
 8000ce4:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <MX_TIM6_Init+0x64>)
 8000ce6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MX_TIM6_Init+0x60>)
 8000cea:	2247      	movs	r2, #71	; 0x47
 8000cec:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <MX_TIM6_Init+0x60>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 30-1;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_TIM6_Init+0x60>)
 8000cf6:	221d      	movs	r2, #29
 8000cf8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_TIM6_Init+0x60>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d00:	480c      	ldr	r0, [pc, #48]	; (8000d34 <MX_TIM6_Init+0x60>)
 8000d02:	f002 fa87 	bl	8003214 <HAL_TIM_Base_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8000d0c:	f7ff fe5c 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d10:	2300      	movs	r3, #0
 8000d12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d18:	463b      	mov	r3, r7
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4805      	ldr	r0, [pc, #20]	; (8000d34 <MX_TIM6_Init+0x60>)
 8000d1e:	f002 fccf 	bl	80036c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8000d28:	f7ff fe4e 	bl	80009c8 <Error_Handler>
  }

}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	200001e0 	.word	0x200001e0
 8000d38:	40001000 	.word	0x40001000

08000d3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <HAL_TIM_Base_MspInit+0x44>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d113      	bne.n	8000d76 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <HAL_TIM_Base_MspInit+0x48>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <HAL_TIM_Base_MspInit+0x48>)
 8000d54:	f043 0310 	orr.w	r3, r3, #16
 8000d58:	61d3      	str	r3, [r2, #28]
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_TIM_Base_MspInit+0x48>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2101      	movs	r1, #1
 8000d6a:	2036      	movs	r0, #54	; 0x36
 8000d6c:	f000 fd3f 	bl	80017ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000d70:	2036      	movs	r0, #54	; 0x36
 8000d72:	f000 fd58 	bl	8001826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40001000 	.word	0x40001000
 8000d84:	40021000 	.word	0x40021000

08000d88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d88:	480c      	ldr	r0, [pc, #48]	; (8000dbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d8a:	490d      	ldr	r1, [pc, #52]	; (8000dc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d90:	e002      	b.n	8000d98 <LoopCopyDataInit>

08000d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d96:	3304      	adds	r3, #4

08000d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d9c:	d3f9      	bcc.n	8000d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da0:	4c0a      	ldr	r4, [pc, #40]	; (8000dcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da4:	e001      	b.n	8000daa <LoopFillZerobss>

08000da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da8:	3204      	adds	r2, #4

08000daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dac:	d3fb      	bcc.n	8000da6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dae:	f7ff ff8b 	bl	8000cc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000db2:	f002 fd03 	bl	80037bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000db6:	f7ff fcc5 	bl	8000744 <main>
  bx lr
 8000dba:	4770      	bx	lr
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8000dc4:	08003898 	.word	0x08003898
  ldr r2, =_sbss
 8000dc8:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8000dcc:	2000022c 	.word	0x2000022c

08000dd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC1_2_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_Init+0x28>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <HAL_Init+0x28>)
 8000dde:	f043 0310 	orr.w	r3, r3, #16
 8000de2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f000 fcf7 	bl	80017d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dea:	2000      	movs	r0, #0
 8000dec:	f000 f808 	bl	8000e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df0:	f7ff fee0 	bl	8000bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40022000 	.word	0x40022000

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x54>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_InitTick+0x58>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 fd0f 	bl	8001842 <HAL_SYSTICK_Config>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00e      	b.n	8000e4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b0f      	cmp	r3, #15
 8000e32:	d80a      	bhi.n	8000e4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e34:	2200      	movs	r2, #0
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f000 fcd7 	bl	80017ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e40:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <HAL_InitTick+0x5c>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e000      	b.n	8000e4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000038 	.word	0x20000038
 8000e58:	20000040 	.word	0x20000040
 8000e5c:	2000003c 	.word	0x2000003c

08000e60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HAL_IncTick+0x1c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_IncTick+0x20>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a03      	ldr	r2, [pc, #12]	; (8000e80 <HAL_IncTick+0x20>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	20000040 	.word	0x20000040
 8000e80:	20000228 	.word	0x20000228

08000e84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b02      	ldr	r3, [pc, #8]	; (8000e94 <HAL_GetTick+0x10>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	20000228 	.word	0x20000228

08000e98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e0ce      	b.n	8001058 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d109      	bne.n	8000edc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff fa00 	bl	80002dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f000 fb07 	bl	80014f0 <ADC_ConversionStop_Disable>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eea:	f003 0310 	and.w	r3, r3, #16
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f040 80a9 	bne.w	8001046 <HAL_ADC_Init+0x1ae>
 8000ef4:	7dfb      	ldrb	r3, [r7, #23]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f040 80a5 	bne.w	8001046 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f00:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f04:	f023 0302 	bic.w	r3, r3, #2
 8000f08:	f043 0202 	orr.w	r2, r3, #2
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4951      	ldr	r1, [pc, #324]	; (8001060 <HAL_ADC_Init+0x1c8>)
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d10a      	bne.n	8000f34 <HAL_ADC_Init+0x9c>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000f26:	d002      	beq.n	8000f2e <HAL_ADC_Init+0x96>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69db      	ldr	r3, [r3, #28]
 8000f2c:	e004      	b.n	8000f38 <HAL_ADC_Init+0xa0>
 8000f2e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000f32:	e001      	b.n	8000f38 <HAL_ADC_Init+0xa0>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f38:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	7b1b      	ldrb	r3, [r3, #12]
 8000f3e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f40:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f50:	d003      	beq.n	8000f5a <HAL_ADC_Init+0xc2>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d102      	bne.n	8000f60 <HAL_ADC_Init+0xc8>
 8000f5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5e:	e000      	b.n	8000f62 <HAL_ADC_Init+0xca>
 8000f60:	2300      	movs	r3, #0
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	7d1b      	ldrb	r3, [r3, #20]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d119      	bne.n	8000fa4 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	7b1b      	ldrb	r3, [r3, #12]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d109      	bne.n	8000f8c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	035a      	lsls	r2, r3, #13
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	e00b      	b.n	8000fa4 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f90:	f043 0220 	orr.w	r2, r3, #32
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9c:	f043 0201 	orr.w	r2, r3, #1
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	4b29      	ldr	r3, [pc, #164]	; (8001064 <HAL_ADC_Init+0x1cc>)
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	6812      	ldr	r2, [r2, #0]
 8000fc6:	68b9      	ldr	r1, [r7, #8]
 8000fc8:	430b      	orrs	r3, r1
 8000fca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fd4:	d003      	beq.n	8000fde <HAL_ADC_Init+0x146>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d104      	bne.n	8000fe8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	691b      	ldr	r3, [r3, #16]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	051b      	lsls	r3, r3, #20
 8000fe6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <HAL_ADC_Init+0x1d0>)
 8001004:	4013      	ands	r3, r2
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	429a      	cmp	r2, r3
 800100a:	d10b      	bne.n	8001024 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001016:	f023 0303 	bic.w	r3, r3, #3
 800101a:	f043 0201 	orr.w	r2, r3, #1
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001022:	e018      	b.n	8001056 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001028:	f023 0312 	bic.w	r3, r3, #18
 800102c:	f043 0210 	orr.w	r2, r3, #16
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001038:	f043 0201 	orr.w	r2, r3, #1
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001044:	e007      	b.n	8001056 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104a:	f043 0210 	orr.w	r2, r3, #16
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001056:	7dfb      	ldrb	r3, [r7, #23]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40013c00 	.word	0x40013c00
 8001064:	ffe1f7fd 	.word	0xffe1f7fd
 8001068:	ff1f0efe 	.word	0xff1f0efe

0800106c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a64      	ldr	r2, [pc, #400]	; (8001214 <HAL_ADC_Start_DMA+0x1a8>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d004      	beq.n	8001090 <HAL_ADC_Start_DMA+0x24>
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a63      	ldr	r2, [pc, #396]	; (8001218 <HAL_ADC_Start_DMA+0x1ac>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d106      	bne.n	800109e <HAL_ADC_Start_DMA+0x32>
 8001090:	4b60      	ldr	r3, [pc, #384]	; (8001214 <HAL_ADC_Start_DMA+0x1a8>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001098:	2b00      	cmp	r3, #0
 800109a:	f040 80b3 	bne.w	8001204 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d101      	bne.n	80010ac <HAL_ADC_Start_DMA+0x40>
 80010a8:	2302      	movs	r3, #2
 80010aa:	e0ae      	b.n	800120a <HAL_ADC_Start_DMA+0x19e>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2201      	movs	r2, #1
 80010b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f000 f9c1 	bl	800143c <ADC_Enable>
 80010ba:	4603      	mov	r3, r0
 80010bc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80010be:	7dfb      	ldrb	r3, [r7, #23]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f040 809a 	bne.w	80011fa <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80010ce:	f023 0301 	bic.w	r3, r3, #1
 80010d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a4e      	ldr	r2, [pc, #312]	; (8001218 <HAL_ADC_Start_DMA+0x1ac>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d105      	bne.n	80010f0 <HAL_ADC_Start_DMA+0x84>
 80010e4:	4b4b      	ldr	r3, [pc, #300]	; (8001214 <HAL_ADC_Start_DMA+0x1a8>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d115      	bne.n	800111c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001106:	2b00      	cmp	r3, #0
 8001108:	d026      	beq.n	8001158 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001112:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800111a:	e01d      	b.n	8001158 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001120:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a39      	ldr	r2, [pc, #228]	; (8001214 <HAL_ADC_Start_DMA+0x1a8>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d004      	beq.n	800113c <HAL_ADC_Start_DMA+0xd0>
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a38      	ldr	r2, [pc, #224]	; (8001218 <HAL_ADC_Start_DMA+0x1ac>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d10d      	bne.n	8001158 <HAL_ADC_Start_DMA+0xec>
 800113c:	4b35      	ldr	r3, [pc, #212]	; (8001214 <HAL_ADC_Start_DMA+0x1a8>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001144:	2b00      	cmp	r3, #0
 8001146:	d007      	beq.n	8001158 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001150:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d006      	beq.n	8001172 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001168:	f023 0206 	bic.w	r2, r3, #6
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001170:	e002      	b.n	8001178 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2200      	movs	r2, #0
 8001176:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	4a25      	ldr	r2, [pc, #148]	; (800121c <HAL_ADC_Start_DMA+0x1b0>)
 8001186:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	4a24      	ldr	r2, [pc, #144]	; (8001220 <HAL_ADC_Start_DMA+0x1b4>)
 800118e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	4a23      	ldr	r2, [pc, #140]	; (8001224 <HAL_ADC_Start_DMA+0x1b8>)
 8001196:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f06f 0202 	mvn.w	r2, #2
 80011a0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011b0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6a18      	ldr	r0, [r3, #32]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	334c      	adds	r3, #76	; 0x4c
 80011bc:	4619      	mov	r1, r3
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f000 fbc1 	bl	8001948 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80011d0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011d4:	d108      	bne.n	80011e8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80011e4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80011e6:	e00f      	b.n	8001208 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80011f6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80011f8:	e006      	b.n	8001208 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001202:	e001      	b.n	8001208 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001208:	7dfb      	ldrb	r3, [r7, #23]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40012400 	.word	0x40012400
 8001218:	40012800 	.word	0x40012800
 800121c:	08001573 	.word	0x08001573
 8001220:	080015ef 	.word	0x080015ef
 8001224:	0800160b 	.word	0x0800160b

08001228 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr

0800123a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr

0800124c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001264:	2b01      	cmp	r3, #1
 8001266:	d101      	bne.n	800126c <HAL_ADC_ConfigChannel+0x20>
 8001268:	2302      	movs	r3, #2
 800126a:	e0dc      	b.n	8001426 <HAL_ADC_ConfigChannel+0x1da>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2201      	movs	r2, #1
 8001270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b06      	cmp	r3, #6
 800127a:	d81c      	bhi.n	80012b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	4613      	mov	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	3b05      	subs	r3, #5
 800128e:	221f      	movs	r2, #31
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	4019      	ands	r1, r3
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	6818      	ldr	r0, [r3, #0]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	3b05      	subs	r3, #5
 80012a8:	fa00 f203 	lsl.w	r2, r0, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	635a      	str	r2, [r3, #52]	; 0x34
 80012b4:	e03c      	b.n	8001330 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b0c      	cmp	r3, #12
 80012bc:	d81c      	bhi.n	80012f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	3b23      	subs	r3, #35	; 0x23
 80012d0:	221f      	movs	r2, #31
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	4019      	ands	r1, r3
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	6818      	ldr	r0, [r3, #0]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	3b23      	subs	r3, #35	; 0x23
 80012ea:	fa00 f203 	lsl.w	r2, r0, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	631a      	str	r2, [r3, #48]	; 0x30
 80012f6:	e01b      	b.n	8001330 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	3b41      	subs	r3, #65	; 0x41
 800130a:	221f      	movs	r2, #31
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	4019      	ands	r1, r3
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	3b41      	subs	r3, #65	; 0x41
 8001324:	fa00 f203 	lsl.w	r2, r0, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b09      	cmp	r3, #9
 8001336:	d91c      	bls.n	8001372 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	68d9      	ldr	r1, [r3, #12]
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	3b1e      	subs	r3, #30
 800134a:	2207      	movs	r2, #7
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	4019      	ands	r1, r3
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	6898      	ldr	r0, [r3, #8]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	3b1e      	subs	r3, #30
 8001364:	fa00 f203 	lsl.w	r2, r0, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	e019      	b.n	80013a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6919      	ldr	r1, [r3, #16]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	2207      	movs	r2, #7
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	4019      	ands	r1, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	6898      	ldr	r0, [r3, #8]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	fa00 f203 	lsl.w	r2, r0, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b10      	cmp	r3, #16
 80013ac:	d003      	beq.n	80013b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013b2:	2b11      	cmp	r3, #17
 80013b4:	d132      	bne.n	800141c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a1d      	ldr	r2, [pc, #116]	; (8001430 <HAL_ADC_ConfigChannel+0x1e4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d125      	bne.n	800140c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d126      	bne.n	800141c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013dc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b10      	cmp	r3, #16
 80013e4:	d11a      	bne.n	800141c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <HAL_ADC_ConfigChannel+0x1e8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a13      	ldr	r2, [pc, #76]	; (8001438 <HAL_ADC_ConfigChannel+0x1ec>)
 80013ec:	fba2 2303 	umull	r2, r3, r2, r3
 80013f0:	0c9a      	lsrs	r2, r3, #18
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013fc:	e002      	b.n	8001404 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	3b01      	subs	r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f9      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x1b2>
 800140a:	e007      	b.n	800141c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001410:	f043 0220 	orr.w	r2, r3, #32
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001424:	7bfb      	ldrb	r3, [r7, #15]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	40012400 	.word	0x40012400
 8001434:	20000038 	.word	0x20000038
 8001438:	431bde83 	.word	0x431bde83

0800143c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b01      	cmp	r3, #1
 8001458:	d040      	beq.n	80014dc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f042 0201 	orr.w	r2, r2, #1
 8001468:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <ADC_Enable+0xac>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a1f      	ldr	r2, [pc, #124]	; (80014ec <ADC_Enable+0xb0>)
 8001470:	fba2 2303 	umull	r2, r3, r2, r3
 8001474:	0c9b      	lsrs	r3, r3, #18
 8001476:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001478:	e002      	b.n	8001480 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	3b01      	subs	r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f9      	bne.n	800147a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001486:	f7ff fcfd 	bl	8000e84 <HAL_GetTick>
 800148a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800148c:	e01f      	b.n	80014ce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800148e:	f7ff fcf9 	bl	8000e84 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d918      	bls.n	80014ce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d011      	beq.n	80014ce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ae:	f043 0210 	orr.w	r2, r3, #16
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ba:	f043 0201 	orr.w	r2, r3, #1
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e007      	b.n	80014de <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d1d8      	bne.n	800148e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000038 	.word	0x20000038
 80014ec:	431bde83 	.word	0x431bde83

080014f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b01      	cmp	r3, #1
 8001508:	d12e      	bne.n	8001568 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0201 	bic.w	r2, r2, #1
 8001518:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800151a:	f7ff fcb3 	bl	8000e84 <HAL_GetTick>
 800151e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001520:	e01b      	b.n	800155a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001522:	f7ff fcaf 	bl	8000e84 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d914      	bls.n	800155a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b01      	cmp	r3, #1
 800153c:	d10d      	bne.n	800155a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001542:	f043 0210 	orr.w	r2, r3, #16
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154e:	f043 0201 	orr.w	r2, r3, #1
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e007      	b.n	800156a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	2b01      	cmp	r3, #1
 8001566:	d0dc      	beq.n	8001522 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001584:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001588:	2b00      	cmp	r3, #0
 800158a:	d127      	bne.n	80015dc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001590:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015a6:	d115      	bne.n	80015d4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d111      	bne.n	80015d4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d105      	bne.n	80015d4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	f043 0201 	orr.w	r2, r3, #1
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f7ff f8ab 	bl	8000730 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80015da:	e004      	b.n	80015e6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	4798      	blx	r3
}
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b084      	sub	sp, #16
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f7ff fe13 	bl	8001228 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b084      	sub	sp, #16
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	f043 0204 	orr.w	r2, r3, #4
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f7ff fe02 	bl	800123a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <__NVIC_SetPriorityGrouping+0x44>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800165c:	4013      	ands	r3, r2
 800165e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800166c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001672:	4a04      	ldr	r2, [pc, #16]	; (8001684 <__NVIC_SetPriorityGrouping+0x44>)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	60d3      	str	r3, [r2, #12]
}
 8001678:	bf00      	nop
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <__NVIC_GetPriorityGrouping+0x18>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	f003 0307 	and.w	r3, r3, #7
}
 8001696:	4618      	mov	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	db0b      	blt.n	80016ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	f003 021f 	and.w	r2, r3, #31
 80016bc:	4906      	ldr	r1, [pc, #24]	; (80016d8 <__NVIC_EnableIRQ+0x34>)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	095b      	lsrs	r3, r3, #5
 80016c4:	2001      	movs	r0, #1
 80016c6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	e000e100 	.word	0xe000e100

080016dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	db0a      	blt.n	8001706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	490c      	ldr	r1, [pc, #48]	; (8001728 <__NVIC_SetPriority+0x4c>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	0112      	lsls	r2, r2, #4
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	440b      	add	r3, r1
 8001700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001704:	e00a      	b.n	800171c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4908      	ldr	r1, [pc, #32]	; (800172c <__NVIC_SetPriority+0x50>)
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	3b04      	subs	r3, #4
 8001714:	0112      	lsls	r2, r2, #4
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	440b      	add	r3, r1
 800171a:	761a      	strb	r2, [r3, #24]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000e100 	.word	0xe000e100
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f1c3 0307 	rsb	r3, r3, #7
 800174a:	2b04      	cmp	r3, #4
 800174c:	bf28      	it	cs
 800174e:	2304      	movcs	r3, #4
 8001750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3304      	adds	r3, #4
 8001756:	2b06      	cmp	r3, #6
 8001758:	d902      	bls.n	8001760 <NVIC_EncodePriority+0x30>
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3b03      	subs	r3, #3
 800175e:	e000      	b.n	8001762 <NVIC_EncodePriority+0x32>
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	f04f 32ff 	mov.w	r2, #4294967295
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43da      	mvns	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	401a      	ands	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001778:	f04f 31ff 	mov.w	r1, #4294967295
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	43d9      	mvns	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	4313      	orrs	r3, r2
         );
}
 800178a:	4618      	mov	r0, r3
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3b01      	subs	r3, #1
 80017a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a4:	d301      	bcc.n	80017aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a6:	2301      	movs	r3, #1
 80017a8:	e00f      	b.n	80017ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <SysTick_Config+0x40>)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b2:	210f      	movs	r1, #15
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f7ff ff90 	bl	80016dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <SysTick_Config+0x40>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c2:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <SysTick_Config+0x40>)
 80017c4:	2207      	movs	r2, #7
 80017c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	e000e010 	.word	0xe000e010

080017d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ff2d 	bl	8001640 <__NVIC_SetPriorityGrouping>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001800:	f7ff ff42 	bl	8001688 <__NVIC_GetPriorityGrouping>
 8001804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68b9      	ldr	r1, [r7, #8]
 800180a:	6978      	ldr	r0, [r7, #20]
 800180c:	f7ff ff90 	bl	8001730 <NVIC_EncodePriority>
 8001810:	4602      	mov	r2, r0
 8001812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff5f 	bl	80016dc <__NVIC_SetPriority>
}
 800181e:	bf00      	nop
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff35 	bl	80016a4 <__NVIC_EnableIRQ>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff ffa2 	bl	8001794 <SysTick_Config>
 8001850:	4603      	mov	r3, r0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e059      	b.n	8001926 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <HAL_DMA_Init+0xd4>)
 800187a:	429a      	cmp	r2, r3
 800187c:	d80f      	bhi.n	800189e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <HAL_DMA_Init+0xd8>)
 8001886:	4413      	add	r3, r2
 8001888:	4a2b      	ldr	r2, [pc, #172]	; (8001938 <HAL_DMA_Init+0xdc>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	091b      	lsrs	r3, r3, #4
 8001890:	009a      	lsls	r2, r3, #2
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a28      	ldr	r2, [pc, #160]	; (800193c <HAL_DMA_Init+0xe0>)
 800189a:	63da      	str	r2, [r3, #60]	; 0x3c
 800189c:	e00e      	b.n	80018bc <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	4b26      	ldr	r3, [pc, #152]	; (8001940 <HAL_DMA_Init+0xe4>)
 80018a6:	4413      	add	r3, r2
 80018a8:	4a23      	ldr	r2, [pc, #140]	; (8001938 <HAL_DMA_Init+0xdc>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	091b      	lsrs	r3, r3, #4
 80018b0:	009a      	lsls	r2, r3, #2
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a22      	ldr	r2, [pc, #136]	; (8001944 <HAL_DMA_Init+0xe8>)
 80018ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2202      	movs	r2, #2
 80018c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80018d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80018d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80018e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	4313      	orrs	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	40020407 	.word	0x40020407
 8001934:	bffdfff8 	.word	0xbffdfff8
 8001938:	cccccccd 	.word	0xcccccccd
 800193c:	40020000 	.word	0x40020000
 8001940:	bffdfbf8 	.word	0xbffdfbf8
 8001944:	40020400 	.word	0x40020400

08001948 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
 8001954:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d101      	bne.n	8001968 <HAL_DMA_Start_IT+0x20>
 8001964:	2302      	movs	r3, #2
 8001966:	e04a      	b.n	80019fe <HAL_DMA_Start_IT+0xb6>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001976:	2b01      	cmp	r3, #1
 8001978:	d13a      	bne.n	80019f0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2202      	movs	r2, #2
 800197e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 0201 	bic.w	r2, r2, #1
 8001996:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 fa6e 	bl	8001e80 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d008      	beq.n	80019be <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 020e 	orr.w	r2, r2, #14
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	e00f      	b.n	80019de <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0204 	bic.w	r2, r2, #4
 80019cc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f042 020a 	orr.w	r2, r2, #10
 80019dc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f042 0201 	orr.w	r2, r2, #1
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	e005      	b.n	80019fc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80019f8:	2302      	movs	r3, #2
 80019fa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80019fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	2204      	movs	r2, #4
 8001a26:	409a      	lsls	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80d6 	beq.w	8001bde <HAL_DMA_IRQHandler+0x1d6>
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 80d0 	beq.w	8001bde <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0320 	and.w	r3, r3, #32
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d107      	bne.n	8001a5c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0204 	bic.w	r2, r2, #4
 8001a5a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b9b      	ldr	r3, [pc, #620]	; (8001cd0 <HAL_DMA_IRQHandler+0x2c8>)
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d958      	bls.n	8001b1a <HAL_DMA_IRQHandler+0x112>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a99      	ldr	r2, [pc, #612]	; (8001cd4 <HAL_DMA_IRQHandler+0x2cc>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d04f      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x10a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a98      	ldr	r2, [pc, #608]	; (8001cd8 <HAL_DMA_IRQHandler+0x2d0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d048      	beq.n	8001b0e <HAL_DMA_IRQHandler+0x106>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a96      	ldr	r2, [pc, #600]	; (8001cdc <HAL_DMA_IRQHandler+0x2d4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d040      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x100>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a95      	ldr	r2, [pc, #596]	; (8001ce0 <HAL_DMA_IRQHandler+0x2d8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d038      	beq.n	8001b02 <HAL_DMA_IRQHandler+0xfa>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a93      	ldr	r2, [pc, #588]	; (8001ce4 <HAL_DMA_IRQHandler+0x2dc>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d030      	beq.n	8001afc <HAL_DMA_IRQHandler+0xf4>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a92      	ldr	r2, [pc, #584]	; (8001ce8 <HAL_DMA_IRQHandler+0x2e0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d028      	beq.n	8001af6 <HAL_DMA_IRQHandler+0xee>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a89      	ldr	r2, [pc, #548]	; (8001cd0 <HAL_DMA_IRQHandler+0x2c8>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d020      	beq.n	8001af0 <HAL_DMA_IRQHandler+0xe8>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a8e      	ldr	r2, [pc, #568]	; (8001cec <HAL_DMA_IRQHandler+0x2e4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d019      	beq.n	8001aec <HAL_DMA_IRQHandler+0xe4>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a8c      	ldr	r2, [pc, #560]	; (8001cf0 <HAL_DMA_IRQHandler+0x2e8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d012      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0xe0>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a8b      	ldr	r2, [pc, #556]	; (8001cf4 <HAL_DMA_IRQHandler+0x2ec>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d00a      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0xda>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a89      	ldr	r2, [pc, #548]	; (8001cf8 <HAL_DMA_IRQHandler+0x2f0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d102      	bne.n	8001adc <HAL_DMA_IRQHandler+0xd4>
 8001ad6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ada:	e01b      	b.n	8001b14 <HAL_DMA_IRQHandler+0x10c>
 8001adc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ae0:	e018      	b.n	8001b14 <HAL_DMA_IRQHandler+0x10c>
 8001ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae6:	e015      	b.n	8001b14 <HAL_DMA_IRQHandler+0x10c>
 8001ae8:	2340      	movs	r3, #64	; 0x40
 8001aea:	e013      	b.n	8001b14 <HAL_DMA_IRQHandler+0x10c>
 8001aec:	2304      	movs	r3, #4
 8001aee:	e011      	b.n	8001b14 <HAL_DMA_IRQHandler+0x10c>
 8001af0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001af4:	e00e      	b.n	8001b14 <HAL_DMA_IRQHandler+0x10c>
 8001af6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001afa:	e00b      	b.n	8001b14 <HAL_DMA_IRQHandler+0x10c>
 8001afc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b00:	e008      	b.n	8001b14 <HAL_DMA_IRQHandler+0x10c>
 8001b02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b06:	e005      	b.n	8001b14 <HAL_DMA_IRQHandler+0x10c>
 8001b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b0c:	e002      	b.n	8001b14 <HAL_DMA_IRQHandler+0x10c>
 8001b0e:	2340      	movs	r3, #64	; 0x40
 8001b10:	e000      	b.n	8001b14 <HAL_DMA_IRQHandler+0x10c>
 8001b12:	2304      	movs	r3, #4
 8001b14:	4a79      	ldr	r2, [pc, #484]	; (8001cfc <HAL_DMA_IRQHandler+0x2f4>)
 8001b16:	6053      	str	r3, [r2, #4]
 8001b18:	e057      	b.n	8001bca <HAL_DMA_IRQHandler+0x1c2>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a6d      	ldr	r2, [pc, #436]	; (8001cd4 <HAL_DMA_IRQHandler+0x2cc>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d04f      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x1bc>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a6b      	ldr	r2, [pc, #428]	; (8001cd8 <HAL_DMA_IRQHandler+0x2d0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d048      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x1b8>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a6a      	ldr	r2, [pc, #424]	; (8001cdc <HAL_DMA_IRQHandler+0x2d4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d040      	beq.n	8001bba <HAL_DMA_IRQHandler+0x1b2>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a68      	ldr	r2, [pc, #416]	; (8001ce0 <HAL_DMA_IRQHandler+0x2d8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d038      	beq.n	8001bb4 <HAL_DMA_IRQHandler+0x1ac>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a67      	ldr	r2, [pc, #412]	; (8001ce4 <HAL_DMA_IRQHandler+0x2dc>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d030      	beq.n	8001bae <HAL_DMA_IRQHandler+0x1a6>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a65      	ldr	r2, [pc, #404]	; (8001ce8 <HAL_DMA_IRQHandler+0x2e0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d028      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x1a0>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a5d      	ldr	r2, [pc, #372]	; (8001cd0 <HAL_DMA_IRQHandler+0x2c8>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d020      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0x19a>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a61      	ldr	r2, [pc, #388]	; (8001cec <HAL_DMA_IRQHandler+0x2e4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d019      	beq.n	8001b9e <HAL_DMA_IRQHandler+0x196>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a60      	ldr	r2, [pc, #384]	; (8001cf0 <HAL_DMA_IRQHandler+0x2e8>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d012      	beq.n	8001b9a <HAL_DMA_IRQHandler+0x192>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a5e      	ldr	r2, [pc, #376]	; (8001cf4 <HAL_DMA_IRQHandler+0x2ec>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00a      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x18c>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a5d      	ldr	r2, [pc, #372]	; (8001cf8 <HAL_DMA_IRQHandler+0x2f0>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d102      	bne.n	8001b8e <HAL_DMA_IRQHandler+0x186>
 8001b88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b8c:	e01b      	b.n	8001bc6 <HAL_DMA_IRQHandler+0x1be>
 8001b8e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b92:	e018      	b.n	8001bc6 <HAL_DMA_IRQHandler+0x1be>
 8001b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b98:	e015      	b.n	8001bc6 <HAL_DMA_IRQHandler+0x1be>
 8001b9a:	2340      	movs	r3, #64	; 0x40
 8001b9c:	e013      	b.n	8001bc6 <HAL_DMA_IRQHandler+0x1be>
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	e011      	b.n	8001bc6 <HAL_DMA_IRQHandler+0x1be>
 8001ba2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001ba6:	e00e      	b.n	8001bc6 <HAL_DMA_IRQHandler+0x1be>
 8001ba8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bac:	e00b      	b.n	8001bc6 <HAL_DMA_IRQHandler+0x1be>
 8001bae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001bb2:	e008      	b.n	8001bc6 <HAL_DMA_IRQHandler+0x1be>
 8001bb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bb8:	e005      	b.n	8001bc6 <HAL_DMA_IRQHandler+0x1be>
 8001bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bbe:	e002      	b.n	8001bc6 <HAL_DMA_IRQHandler+0x1be>
 8001bc0:	2340      	movs	r3, #64	; 0x40
 8001bc2:	e000      	b.n	8001bc6 <HAL_DMA_IRQHandler+0x1be>
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	4a4e      	ldr	r2, [pc, #312]	; (8001d00 <HAL_DMA_IRQHandler+0x2f8>)
 8001bc8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8136 	beq.w	8001e40 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001bdc:	e130      	b.n	8001e40 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	2202      	movs	r2, #2
 8001be4:	409a      	lsls	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 80f8 	beq.w	8001de0 <HAL_DMA_IRQHandler+0x3d8>
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 80f2 	beq.w	8001de0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10b      	bne.n	8001c22 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 020a 	bic.w	r2, r2, #10
 8001c18:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <HAL_DMA_IRQHandler+0x2c8>)
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d973      	bls.n	8001d16 <HAL_DMA_IRQHandler+0x30e>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a28      	ldr	r2, [pc, #160]	; (8001cd4 <HAL_DMA_IRQHandler+0x2cc>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d06a      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x306>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a26      	ldr	r2, [pc, #152]	; (8001cd8 <HAL_DMA_IRQHandler+0x2d0>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d063      	beq.n	8001d0a <HAL_DMA_IRQHandler+0x302>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a25      	ldr	r2, [pc, #148]	; (8001cdc <HAL_DMA_IRQHandler+0x2d4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d05b      	beq.n	8001d04 <HAL_DMA_IRQHandler+0x2fc>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a23      	ldr	r2, [pc, #140]	; (8001ce0 <HAL_DMA_IRQHandler+0x2d8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d038      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x2c0>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a22      	ldr	r2, [pc, #136]	; (8001ce4 <HAL_DMA_IRQHandler+0x2dc>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d030      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x2ba>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a20      	ldr	r2, [pc, #128]	; (8001ce8 <HAL_DMA_IRQHandler+0x2e0>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d028      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x2b4>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a18      	ldr	r2, [pc, #96]	; (8001cd0 <HAL_DMA_IRQHandler+0x2c8>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d020      	beq.n	8001cb6 <HAL_DMA_IRQHandler+0x2ae>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a1c      	ldr	r2, [pc, #112]	; (8001cec <HAL_DMA_IRQHandler+0x2e4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d019      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0x2aa>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a1b      	ldr	r2, [pc, #108]	; (8001cf0 <HAL_DMA_IRQHandler+0x2e8>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d012      	beq.n	8001cae <HAL_DMA_IRQHandler+0x2a6>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a19      	ldr	r2, [pc, #100]	; (8001cf4 <HAL_DMA_IRQHandler+0x2ec>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00a      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x2a0>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a18      	ldr	r2, [pc, #96]	; (8001cf8 <HAL_DMA_IRQHandler+0x2f0>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d102      	bne.n	8001ca2 <HAL_DMA_IRQHandler+0x29a>
 8001c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ca0:	e036      	b.n	8001d10 <HAL_DMA_IRQHandler+0x308>
 8001ca2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ca6:	e033      	b.n	8001d10 <HAL_DMA_IRQHandler+0x308>
 8001ca8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cac:	e030      	b.n	8001d10 <HAL_DMA_IRQHandler+0x308>
 8001cae:	2320      	movs	r3, #32
 8001cb0:	e02e      	b.n	8001d10 <HAL_DMA_IRQHandler+0x308>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e02c      	b.n	8001d10 <HAL_DMA_IRQHandler+0x308>
 8001cb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cba:	e029      	b.n	8001d10 <HAL_DMA_IRQHandler+0x308>
 8001cbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cc0:	e026      	b.n	8001d10 <HAL_DMA_IRQHandler+0x308>
 8001cc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cc6:	e023      	b.n	8001d10 <HAL_DMA_IRQHandler+0x308>
 8001cc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ccc:	e020      	b.n	8001d10 <HAL_DMA_IRQHandler+0x308>
 8001cce:	bf00      	nop
 8001cd0:	40020080 	.word	0x40020080
 8001cd4:	40020008 	.word	0x40020008
 8001cd8:	4002001c 	.word	0x4002001c
 8001cdc:	40020030 	.word	0x40020030
 8001ce0:	40020044 	.word	0x40020044
 8001ce4:	40020058 	.word	0x40020058
 8001ce8:	4002006c 	.word	0x4002006c
 8001cec:	40020408 	.word	0x40020408
 8001cf0:	4002041c 	.word	0x4002041c
 8001cf4:	40020430 	.word	0x40020430
 8001cf8:	40020444 	.word	0x40020444
 8001cfc:	40020400 	.word	0x40020400
 8001d00:	40020000 	.word	0x40020000
 8001d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d08:	e002      	b.n	8001d10 <HAL_DMA_IRQHandler+0x308>
 8001d0a:	2320      	movs	r3, #32
 8001d0c:	e000      	b.n	8001d10 <HAL_DMA_IRQHandler+0x308>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	4a4e      	ldr	r2, [pc, #312]	; (8001e4c <HAL_DMA_IRQHandler+0x444>)
 8001d12:	6053      	str	r3, [r2, #4]
 8001d14:	e057      	b.n	8001dc6 <HAL_DMA_IRQHandler+0x3be>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a4d      	ldr	r2, [pc, #308]	; (8001e50 <HAL_DMA_IRQHandler+0x448>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d04f      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x3b8>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a4b      	ldr	r2, [pc, #300]	; (8001e54 <HAL_DMA_IRQHandler+0x44c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d048      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x3b4>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a4a      	ldr	r2, [pc, #296]	; (8001e58 <HAL_DMA_IRQHandler+0x450>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d040      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x3ae>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a48      	ldr	r2, [pc, #288]	; (8001e5c <HAL_DMA_IRQHandler+0x454>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d038      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x3a8>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a47      	ldr	r2, [pc, #284]	; (8001e60 <HAL_DMA_IRQHandler+0x458>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d030      	beq.n	8001daa <HAL_DMA_IRQHandler+0x3a2>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a45      	ldr	r2, [pc, #276]	; (8001e64 <HAL_DMA_IRQHandler+0x45c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d028      	beq.n	8001da4 <HAL_DMA_IRQHandler+0x39c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a44      	ldr	r2, [pc, #272]	; (8001e68 <HAL_DMA_IRQHandler+0x460>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d020      	beq.n	8001d9e <HAL_DMA_IRQHandler+0x396>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a42      	ldr	r2, [pc, #264]	; (8001e6c <HAL_DMA_IRQHandler+0x464>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d019      	beq.n	8001d9a <HAL_DMA_IRQHandler+0x392>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a41      	ldr	r2, [pc, #260]	; (8001e70 <HAL_DMA_IRQHandler+0x468>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d012      	beq.n	8001d96 <HAL_DMA_IRQHandler+0x38e>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a3f      	ldr	r2, [pc, #252]	; (8001e74 <HAL_DMA_IRQHandler+0x46c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00a      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x388>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a3e      	ldr	r2, [pc, #248]	; (8001e78 <HAL_DMA_IRQHandler+0x470>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d102      	bne.n	8001d8a <HAL_DMA_IRQHandler+0x382>
 8001d84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d88:	e01b      	b.n	8001dc2 <HAL_DMA_IRQHandler+0x3ba>
 8001d8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d8e:	e018      	b.n	8001dc2 <HAL_DMA_IRQHandler+0x3ba>
 8001d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d94:	e015      	b.n	8001dc2 <HAL_DMA_IRQHandler+0x3ba>
 8001d96:	2320      	movs	r3, #32
 8001d98:	e013      	b.n	8001dc2 <HAL_DMA_IRQHandler+0x3ba>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e011      	b.n	8001dc2 <HAL_DMA_IRQHandler+0x3ba>
 8001d9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001da2:	e00e      	b.n	8001dc2 <HAL_DMA_IRQHandler+0x3ba>
 8001da4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001da8:	e00b      	b.n	8001dc2 <HAL_DMA_IRQHandler+0x3ba>
 8001daa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dae:	e008      	b.n	8001dc2 <HAL_DMA_IRQHandler+0x3ba>
 8001db0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001db4:	e005      	b.n	8001dc2 <HAL_DMA_IRQHandler+0x3ba>
 8001db6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dba:	e002      	b.n	8001dc2 <HAL_DMA_IRQHandler+0x3ba>
 8001dbc:	2320      	movs	r3, #32
 8001dbe:	e000      	b.n	8001dc2 <HAL_DMA_IRQHandler+0x3ba>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	4a2e      	ldr	r2, [pc, #184]	; (8001e7c <HAL_DMA_IRQHandler+0x474>)
 8001dc4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d034      	beq.n	8001e40 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001dde:	e02f      	b.n	8001e40 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de4:	2208      	movs	r2, #8
 8001de6:	409a      	lsls	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d028      	beq.n	8001e42 <HAL_DMA_IRQHandler+0x43a>
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d023      	beq.n	8001e42 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 020e 	bic.w	r2, r2, #14
 8001e08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e12:	2101      	movs	r1, #1
 8001e14:	fa01 f202 	lsl.w	r2, r1, r2
 8001e18:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d004      	beq.n	8001e42 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	4798      	blx	r3
    }
  }
  return;
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
}
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40020400 	.word	0x40020400
 8001e50:	40020008 	.word	0x40020008
 8001e54:	4002001c 	.word	0x4002001c
 8001e58:	40020030 	.word	0x40020030
 8001e5c:	40020044 	.word	0x40020044
 8001e60:	40020058 	.word	0x40020058
 8001e64:	4002006c 	.word	0x4002006c
 8001e68:	40020080 	.word	0x40020080
 8001e6c:	40020408 	.word	0x40020408
 8001e70:	4002041c 	.word	0x4002041c
 8001e74:	40020430 	.word	0x40020430
 8001e78:	40020444 	.word	0x40020444
 8001e7c:	40020000 	.word	0x40020000

08001e80 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e96:	2101      	movs	r1, #1
 8001e98:	fa01 f202 	lsl.w	r2, r1, r2
 8001e9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b10      	cmp	r3, #16
 8001eac:	d108      	bne.n	8001ec0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ebe:	e007      	b.n	8001ed0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	60da      	str	r2, [r3, #12]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr
	...

08001edc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b08b      	sub	sp, #44	; 0x2c
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eee:	e133      	b.n	8002158 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	f040 8122 	bne.w	8002152 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b12      	cmp	r3, #18
 8001f14:	d034      	beq.n	8001f80 <HAL_GPIO_Init+0xa4>
 8001f16:	2b12      	cmp	r3, #18
 8001f18:	d80d      	bhi.n	8001f36 <HAL_GPIO_Init+0x5a>
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d02b      	beq.n	8001f76 <HAL_GPIO_Init+0x9a>
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d804      	bhi.n	8001f2c <HAL_GPIO_Init+0x50>
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d031      	beq.n	8001f8a <HAL_GPIO_Init+0xae>
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d01c      	beq.n	8001f64 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f2a:	e048      	b.n	8001fbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d043      	beq.n	8001fb8 <HAL_GPIO_Init+0xdc>
 8001f30:	2b11      	cmp	r3, #17
 8001f32:	d01b      	beq.n	8001f6c <HAL_GPIO_Init+0x90>
          break;
 8001f34:	e043      	b.n	8001fbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f36:	4a8f      	ldr	r2, [pc, #572]	; (8002174 <HAL_GPIO_Init+0x298>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d026      	beq.n	8001f8a <HAL_GPIO_Init+0xae>
 8001f3c:	4a8d      	ldr	r2, [pc, #564]	; (8002174 <HAL_GPIO_Init+0x298>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d806      	bhi.n	8001f50 <HAL_GPIO_Init+0x74>
 8001f42:	4a8d      	ldr	r2, [pc, #564]	; (8002178 <HAL_GPIO_Init+0x29c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d020      	beq.n	8001f8a <HAL_GPIO_Init+0xae>
 8001f48:	4a8c      	ldr	r2, [pc, #560]	; (800217c <HAL_GPIO_Init+0x2a0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d01d      	beq.n	8001f8a <HAL_GPIO_Init+0xae>
          break;
 8001f4e:	e036      	b.n	8001fbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f50:	4a8b      	ldr	r2, [pc, #556]	; (8002180 <HAL_GPIO_Init+0x2a4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d019      	beq.n	8001f8a <HAL_GPIO_Init+0xae>
 8001f56:	4a8b      	ldr	r2, [pc, #556]	; (8002184 <HAL_GPIO_Init+0x2a8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d016      	beq.n	8001f8a <HAL_GPIO_Init+0xae>
 8001f5c:	4a8a      	ldr	r2, [pc, #552]	; (8002188 <HAL_GPIO_Init+0x2ac>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d013      	beq.n	8001f8a <HAL_GPIO_Init+0xae>
          break;
 8001f62:	e02c      	b.n	8001fbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	623b      	str	r3, [r7, #32]
          break;
 8001f6a:	e028      	b.n	8001fbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	3304      	adds	r3, #4
 8001f72:	623b      	str	r3, [r7, #32]
          break;
 8001f74:	e023      	b.n	8001fbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	3308      	adds	r3, #8
 8001f7c:	623b      	str	r3, [r7, #32]
          break;
 8001f7e:	e01e      	b.n	8001fbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	330c      	adds	r3, #12
 8001f86:	623b      	str	r3, [r7, #32]
          break;
 8001f88:	e019      	b.n	8001fbe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d102      	bne.n	8001f98 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f92:	2304      	movs	r3, #4
 8001f94:	623b      	str	r3, [r7, #32]
          break;
 8001f96:	e012      	b.n	8001fbe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d105      	bne.n	8001fac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fa0:	2308      	movs	r3, #8
 8001fa2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	611a      	str	r2, [r3, #16]
          break;
 8001faa:	e008      	b.n	8001fbe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fac:	2308      	movs	r3, #8
 8001fae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	615a      	str	r2, [r3, #20]
          break;
 8001fb6:	e002      	b.n	8001fbe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	623b      	str	r3, [r7, #32]
          break;
 8001fbc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	2bff      	cmp	r3, #255	; 0xff
 8001fc2:	d801      	bhi.n	8001fc8 <HAL_GPIO_Init+0xec>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	e001      	b.n	8001fcc <HAL_GPIO_Init+0xf0>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3304      	adds	r3, #4
 8001fcc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	2bff      	cmp	r3, #255	; 0xff
 8001fd2:	d802      	bhi.n	8001fda <HAL_GPIO_Init+0xfe>
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	e002      	b.n	8001fe0 <HAL_GPIO_Init+0x104>
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	3b08      	subs	r3, #8
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	210f      	movs	r1, #15
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	6a39      	ldr	r1, [r7, #32]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 80a2 	beq.w	8002152 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800200e:	4b5f      	ldr	r3, [pc, #380]	; (800218c <HAL_GPIO_Init+0x2b0>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	4a5e      	ldr	r2, [pc, #376]	; (800218c <HAL_GPIO_Init+0x2b0>)
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	6193      	str	r3, [r2, #24]
 800201a:	4b5c      	ldr	r3, [pc, #368]	; (800218c <HAL_GPIO_Init+0x2b0>)
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002026:	4a5a      	ldr	r2, [pc, #360]	; (8002190 <HAL_GPIO_Init+0x2b4>)
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	3302      	adds	r3, #2
 800202e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002032:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	220f      	movs	r2, #15
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4013      	ands	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a51      	ldr	r2, [pc, #324]	; (8002194 <HAL_GPIO_Init+0x2b8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d01f      	beq.n	8002092 <HAL_GPIO_Init+0x1b6>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a50      	ldr	r2, [pc, #320]	; (8002198 <HAL_GPIO_Init+0x2bc>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d019      	beq.n	800208e <HAL_GPIO_Init+0x1b2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4f      	ldr	r2, [pc, #316]	; (800219c <HAL_GPIO_Init+0x2c0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d013      	beq.n	800208a <HAL_GPIO_Init+0x1ae>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4e      	ldr	r2, [pc, #312]	; (80021a0 <HAL_GPIO_Init+0x2c4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00d      	beq.n	8002086 <HAL_GPIO_Init+0x1aa>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4d      	ldr	r2, [pc, #308]	; (80021a4 <HAL_GPIO_Init+0x2c8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d007      	beq.n	8002082 <HAL_GPIO_Init+0x1a6>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4c      	ldr	r2, [pc, #304]	; (80021a8 <HAL_GPIO_Init+0x2cc>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d101      	bne.n	800207e <HAL_GPIO_Init+0x1a2>
 800207a:	2305      	movs	r3, #5
 800207c:	e00a      	b.n	8002094 <HAL_GPIO_Init+0x1b8>
 800207e:	2306      	movs	r3, #6
 8002080:	e008      	b.n	8002094 <HAL_GPIO_Init+0x1b8>
 8002082:	2304      	movs	r3, #4
 8002084:	e006      	b.n	8002094 <HAL_GPIO_Init+0x1b8>
 8002086:	2303      	movs	r3, #3
 8002088:	e004      	b.n	8002094 <HAL_GPIO_Init+0x1b8>
 800208a:	2302      	movs	r3, #2
 800208c:	e002      	b.n	8002094 <HAL_GPIO_Init+0x1b8>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_GPIO_Init+0x1b8>
 8002092:	2300      	movs	r3, #0
 8002094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002096:	f002 0203 	and.w	r2, r2, #3
 800209a:	0092      	lsls	r2, r2, #2
 800209c:	4093      	lsls	r3, r2
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020a4:	493a      	ldr	r1, [pc, #232]	; (8002190 <HAL_GPIO_Init+0x2b4>)
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	3302      	adds	r3, #2
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d006      	beq.n	80020cc <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020be:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	493a      	ldr	r1, [pc, #232]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]
 80020ca:	e006      	b.n	80020da <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020cc:	4b37      	ldr	r3, [pc, #220]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	4935      	ldr	r1, [pc, #212]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d006      	beq.n	80020f4 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020e6:	4b31      	ldr	r3, [pc, #196]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	4930      	ldr	r1, [pc, #192]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]
 80020f2:	e006      	b.n	8002102 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020f4:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	492b      	ldr	r1, [pc, #172]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 80020fe:	4013      	ands	r3, r2
 8002100:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d006      	beq.n	800211c <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800210e:	4b27      	ldr	r3, [pc, #156]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	4926      	ldr	r1, [pc, #152]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	608b      	str	r3, [r1, #8]
 800211a:	e006      	b.n	800212a <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800211c:	4b23      	ldr	r3, [pc, #140]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	43db      	mvns	r3, r3
 8002124:	4921      	ldr	r1, [pc, #132]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 8002126:	4013      	ands	r3, r2
 8002128:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d006      	beq.n	8002144 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002136:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	491c      	ldr	r1, [pc, #112]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	60cb      	str	r3, [r1, #12]
 8002142:	e006      	b.n	8002152 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	43db      	mvns	r3, r3
 800214c:	4917      	ldr	r1, [pc, #92]	; (80021ac <HAL_GPIO_Init+0x2d0>)
 800214e:	4013      	ands	r3, r2
 8002150:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	3301      	adds	r3, #1
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	fa22 f303 	lsr.w	r3, r2, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	f47f aec4 	bne.w	8001ef0 <HAL_GPIO_Init+0x14>
  }
}
 8002168:	bf00      	nop
 800216a:	372c      	adds	r7, #44	; 0x2c
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	10210000 	.word	0x10210000
 8002178:	10110000 	.word	0x10110000
 800217c:	10120000 	.word	0x10120000
 8002180:	10310000 	.word	0x10310000
 8002184:	10320000 	.word	0x10320000
 8002188:	10220000 	.word	0x10220000
 800218c:	40021000 	.word	0x40021000
 8002190:	40010000 	.word	0x40010000
 8002194:	40010800 	.word	0x40010800
 8002198:	40010c00 	.word	0x40010c00
 800219c:	40011000 	.word	0x40011000
 80021a0:	40011400 	.word	0x40011400
 80021a4:	40011800 	.word	0x40011800
 80021a8:	40011c00 	.word	0x40011c00
 80021ac:	40010400 	.word	0x40010400

080021b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	887b      	ldrh	r3, [r7, #2]
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	e001      	b.n	80021d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ce:	2300      	movs	r3, #0
 80021d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr
	...

080021e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e26c      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 8087 	beq.w	800230e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002200:	4b92      	ldr	r3, [pc, #584]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b04      	cmp	r3, #4
 800220a:	d00c      	beq.n	8002226 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800220c:	4b8f      	ldr	r3, [pc, #572]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d112      	bne.n	800223e <HAL_RCC_OscConfig+0x5e>
 8002218:	4b8c      	ldr	r3, [pc, #560]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002224:	d10b      	bne.n	800223e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002226:	4b89      	ldr	r3, [pc, #548]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d06c      	beq.n	800230c <HAL_RCC_OscConfig+0x12c>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d168      	bne.n	800230c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e246      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002246:	d106      	bne.n	8002256 <HAL_RCC_OscConfig+0x76>
 8002248:	4b80      	ldr	r3, [pc, #512]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a7f      	ldr	r2, [pc, #508]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 800224e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	e02e      	b.n	80022b4 <HAL_RCC_OscConfig+0xd4>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0x98>
 800225e:	4b7b      	ldr	r3, [pc, #492]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a7a      	ldr	r2, [pc, #488]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b78      	ldr	r3, [pc, #480]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a77      	ldr	r2, [pc, #476]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002270:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e01d      	b.n	80022b4 <HAL_RCC_OscConfig+0xd4>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0xbc>
 8002282:	4b72      	ldr	r3, [pc, #456]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a71      	ldr	r2, [pc, #452]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b6f      	ldr	r3, [pc, #444]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a6e      	ldr	r2, [pc, #440]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e00b      	b.n	80022b4 <HAL_RCC_OscConfig+0xd4>
 800229c:	4b6b      	ldr	r3, [pc, #428]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a6a      	ldr	r2, [pc, #424]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 80022a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	4b68      	ldr	r3, [pc, #416]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a67      	ldr	r2, [pc, #412]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 80022ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d013      	beq.n	80022e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe fde2 	bl	8000e84 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c4:	f7fe fdde 	bl	8000e84 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	; 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e1fa      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d6:	4b5d      	ldr	r3, [pc, #372]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0xe4>
 80022e2:	e014      	b.n	800230e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7fe fdce 	bl	8000e84 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ec:	f7fe fdca 	bl	8000e84 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	; 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e1e6      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fe:	4b53      	ldr	r3, [pc, #332]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x10c>
 800230a:	e000      	b.n	800230e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d063      	beq.n	80023e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800231a:	4b4c      	ldr	r3, [pc, #304]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00b      	beq.n	800233e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002326:	4b49      	ldr	r3, [pc, #292]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b08      	cmp	r3, #8
 8002330:	d11c      	bne.n	800236c <HAL_RCC_OscConfig+0x18c>
 8002332:	4b46      	ldr	r3, [pc, #280]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d116      	bne.n	800236c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233e:	4b43      	ldr	r3, [pc, #268]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <HAL_RCC_OscConfig+0x176>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d001      	beq.n	8002356 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e1ba      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002356:	4b3d      	ldr	r3, [pc, #244]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4939      	ldr	r1, [pc, #228]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236a:	e03a      	b.n	80023e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d020      	beq.n	80023b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002374:	4b36      	ldr	r3, [pc, #216]	; (8002450 <HAL_RCC_OscConfig+0x270>)
 8002376:	2201      	movs	r2, #1
 8002378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237a:	f7fe fd83 	bl	8000e84 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002382:	f7fe fd7f 	bl	8000e84 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e19b      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002394:	4b2d      	ldr	r3, [pc, #180]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a0:	4b2a      	ldr	r3, [pc, #168]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4927      	ldr	r1, [pc, #156]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	600b      	str	r3, [r1, #0]
 80023b4:	e015      	b.n	80023e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b6:	4b26      	ldr	r3, [pc, #152]	; (8002450 <HAL_RCC_OscConfig+0x270>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023bc:	f7fe fd62 	bl	8000e84 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c4:	f7fe fd5e 	bl	8000e84 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e17a      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d6:	4b1d      	ldr	r3, [pc, #116]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d03a      	beq.n	8002464 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d019      	beq.n	800242a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f6:	4b17      	ldr	r3, [pc, #92]	; (8002454 <HAL_RCC_OscConfig+0x274>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fc:	f7fe fd42 	bl	8000e84 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002404:	f7fe fd3e 	bl	8000e84 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e15a      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002416:	4b0d      	ldr	r3, [pc, #52]	; (800244c <HAL_RCC_OscConfig+0x26c>)
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002422:	2001      	movs	r0, #1
 8002424:	f000 faaa 	bl	800297c <RCC_Delay>
 8002428:	e01c      	b.n	8002464 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800242a:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <HAL_RCC_OscConfig+0x274>)
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002430:	f7fe fd28 	bl	8000e84 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002436:	e00f      	b.n	8002458 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002438:	f7fe fd24 	bl	8000e84 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d908      	bls.n	8002458 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e140      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	42420000 	.word	0x42420000
 8002454:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002458:	4b9e      	ldr	r3, [pc, #632]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1e9      	bne.n	8002438 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 80a6 	beq.w	80025be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002472:	2300      	movs	r3, #0
 8002474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002476:	4b97      	ldr	r3, [pc, #604]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10d      	bne.n	800249e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002482:	4b94      	ldr	r3, [pc, #592]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	4a93      	ldr	r2, [pc, #588]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248c:	61d3      	str	r3, [r2, #28]
 800248e:	4b91      	ldr	r3, [pc, #580]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800249a:	2301      	movs	r3, #1
 800249c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249e:	4b8e      	ldr	r3, [pc, #568]	; (80026d8 <HAL_RCC_OscConfig+0x4f8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d118      	bne.n	80024dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024aa:	4b8b      	ldr	r3, [pc, #556]	; (80026d8 <HAL_RCC_OscConfig+0x4f8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a8a      	ldr	r2, [pc, #552]	; (80026d8 <HAL_RCC_OscConfig+0x4f8>)
 80024b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b6:	f7fe fce5 	bl	8000e84 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024be:	f7fe fce1 	bl	8000e84 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b64      	cmp	r3, #100	; 0x64
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e0fd      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d0:	4b81      	ldr	r3, [pc, #516]	; (80026d8 <HAL_RCC_OscConfig+0x4f8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d106      	bne.n	80024f2 <HAL_RCC_OscConfig+0x312>
 80024e4:	4b7b      	ldr	r3, [pc, #492]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	4a7a      	ldr	r2, [pc, #488]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6213      	str	r3, [r2, #32]
 80024f0:	e02d      	b.n	800254e <HAL_RCC_OscConfig+0x36e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0x334>
 80024fa:	4b76      	ldr	r3, [pc, #472]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	4a75      	ldr	r2, [pc, #468]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002500:	f023 0301 	bic.w	r3, r3, #1
 8002504:	6213      	str	r3, [r2, #32]
 8002506:	4b73      	ldr	r3, [pc, #460]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	4a72      	ldr	r2, [pc, #456]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 800250c:	f023 0304 	bic.w	r3, r3, #4
 8002510:	6213      	str	r3, [r2, #32]
 8002512:	e01c      	b.n	800254e <HAL_RCC_OscConfig+0x36e>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b05      	cmp	r3, #5
 800251a:	d10c      	bne.n	8002536 <HAL_RCC_OscConfig+0x356>
 800251c:	4b6d      	ldr	r3, [pc, #436]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	4a6c      	ldr	r2, [pc, #432]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002522:	f043 0304 	orr.w	r3, r3, #4
 8002526:	6213      	str	r3, [r2, #32]
 8002528:	4b6a      	ldr	r3, [pc, #424]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	4a69      	ldr	r2, [pc, #420]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6213      	str	r3, [r2, #32]
 8002534:	e00b      	b.n	800254e <HAL_RCC_OscConfig+0x36e>
 8002536:	4b67      	ldr	r3, [pc, #412]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	4a66      	ldr	r2, [pc, #408]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 800253c:	f023 0301 	bic.w	r3, r3, #1
 8002540:	6213      	str	r3, [r2, #32]
 8002542:	4b64      	ldr	r3, [pc, #400]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4a63      	ldr	r2, [pc, #396]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002548:	f023 0304 	bic.w	r3, r3, #4
 800254c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d015      	beq.n	8002582 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002556:	f7fe fc95 	bl	8000e84 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800255c:	e00a      	b.n	8002574 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255e:	f7fe fc91 	bl	8000e84 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f241 3288 	movw	r2, #5000	; 0x1388
 800256c:	4293      	cmp	r3, r2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e0ab      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002574:	4b57      	ldr	r3, [pc, #348]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0ee      	beq.n	800255e <HAL_RCC_OscConfig+0x37e>
 8002580:	e014      	b.n	80025ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002582:	f7fe fc7f 	bl	8000e84 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002588:	e00a      	b.n	80025a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258a:	f7fe fc7b 	bl	8000e84 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	f241 3288 	movw	r2, #5000	; 0x1388
 8002598:	4293      	cmp	r3, r2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e095      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a0:	4b4c      	ldr	r3, [pc, #304]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1ee      	bne.n	800258a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025ac:	7dfb      	ldrb	r3, [r7, #23]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d105      	bne.n	80025be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b2:	4b48      	ldr	r3, [pc, #288]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	4a47      	ldr	r2, [pc, #284]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 80025b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 8081 	beq.w	80026ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c8:	4b42      	ldr	r3, [pc, #264]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d061      	beq.n	8002698 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d146      	bne.n	800266a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025dc:	4b3f      	ldr	r3, [pc, #252]	; (80026dc <HAL_RCC_OscConfig+0x4fc>)
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e2:	f7fe fc4f 	bl	8000e84 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ea:	f7fe fc4b 	bl	8000e84 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e067      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fc:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f0      	bne.n	80025ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002610:	d108      	bne.n	8002624 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002612:	4b30      	ldr	r3, [pc, #192]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	492d      	ldr	r1, [pc, #180]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002624:	4b2b      	ldr	r3, [pc, #172]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a19      	ldr	r1, [r3, #32]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	430b      	orrs	r3, r1
 8002636:	4927      	ldr	r1, [pc, #156]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800263c:	4b27      	ldr	r3, [pc, #156]	; (80026dc <HAL_RCC_OscConfig+0x4fc>)
 800263e:	2201      	movs	r2, #1
 8002640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002642:	f7fe fc1f 	bl	8000e84 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264a:	f7fe fc1b 	bl	8000e84 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e037      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800265c:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0x46a>
 8002668:	e02f      	b.n	80026ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266a:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <HAL_RCC_OscConfig+0x4fc>)
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7fe fc08 	bl	8000e84 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002678:	f7fe fc04 	bl	8000e84 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e020      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x498>
 8002696:	e018      	b.n	80026ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e013      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCC_OscConfig+0x4f4>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d106      	bne.n	80026c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d001      	beq.n	80026ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40007000 	.word	0x40007000
 80026dc:	42420060 	.word	0x42420060

080026e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0d0      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026f4:	4b6a      	ldr	r3, [pc, #424]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d910      	bls.n	8002724 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b67      	ldr	r3, [pc, #412]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 0207 	bic.w	r2, r3, #7
 800270a:	4965      	ldr	r1, [pc, #404]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	4313      	orrs	r3, r2
 8002710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002712:	4b63      	ldr	r3, [pc, #396]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0b8      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d020      	beq.n	8002772 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800273c:	4b59      	ldr	r3, [pc, #356]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	4a58      	ldr	r2, [pc, #352]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002746:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002754:	4b53      	ldr	r3, [pc, #332]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4a52      	ldr	r2, [pc, #328]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800275e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002760:	4b50      	ldr	r3, [pc, #320]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	494d      	ldr	r1, [pc, #308]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	4313      	orrs	r3, r2
 8002770:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d040      	beq.n	8002800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d107      	bne.n	8002796 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002786:	4b47      	ldr	r3, [pc, #284]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d115      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e07f      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279e:	4b41      	ldr	r3, [pc, #260]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e073      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ae:	4b3d      	ldr	r3, [pc, #244]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e06b      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027be:	4b39      	ldr	r3, [pc, #228]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f023 0203 	bic.w	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4936      	ldr	r1, [pc, #216]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d0:	f7fe fb58 	bl	8000e84 <HAL_GetTick>
 80027d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d8:	f7fe fb54 	bl	8000e84 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e053      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	4b2d      	ldr	r3, [pc, #180]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 020c 	and.w	r2, r3, #12
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d1eb      	bne.n	80027d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002800:	4b27      	ldr	r3, [pc, #156]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d210      	bcs.n	8002830 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 0207 	bic.w	r2, r3, #7
 8002816:	4922      	ldr	r1, [pc, #136]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	4313      	orrs	r3, r2
 800281c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281e:	4b20      	ldr	r3, [pc, #128]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d001      	beq.n	8002830 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e032      	b.n	8002896 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800283c:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	4916      	ldr	r1, [pc, #88]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	4313      	orrs	r3, r2
 800284c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d009      	beq.n	800286e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800285a:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	490e      	ldr	r1, [pc, #56]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	4313      	orrs	r3, r2
 800286c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800286e:	f000 f821 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 8002872:	4601      	mov	r1, r0
 8002874:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	091b      	lsrs	r3, r3, #4
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	4a0a      	ldr	r2, [pc, #40]	; (80028a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002880:	5cd3      	ldrb	r3, [r2, r3]
 8002882:	fa21 f303 	lsr.w	r3, r1, r3
 8002886:	4a09      	ldr	r2, [pc, #36]	; (80028ac <HAL_RCC_ClockConfig+0x1cc>)
 8002888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800288a:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <HAL_RCC_ClockConfig+0x1d0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe fab6 	bl	8000e00 <HAL_InitTick>

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40022000 	.word	0x40022000
 80028a4:	40021000 	.word	0x40021000
 80028a8:	08003880 	.word	0x08003880
 80028ac:	20000038 	.word	0x20000038
 80028b0:	2000003c 	.word	0x2000003c

080028b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b4:	b490      	push	{r4, r7}
 80028b6:	b08a      	sub	sp, #40	; 0x28
 80028b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028ba:	4b2a      	ldr	r3, [pc, #168]	; (8002964 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028bc:	1d3c      	adds	r4, r7, #4
 80028be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028c4:	4b28      	ldr	r3, [pc, #160]	; (8002968 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	2300      	movs	r3, #0
 80028d0:	61bb      	str	r3, [r7, #24]
 80028d2:	2300      	movs	r3, #0
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028de:	4b23      	ldr	r3, [pc, #140]	; (800296c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 030c 	and.w	r3, r3, #12
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d002      	beq.n	80028f4 <HAL_RCC_GetSysClockFreq+0x40>
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d003      	beq.n	80028fa <HAL_RCC_GetSysClockFreq+0x46>
 80028f2:	e02d      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028f4:	4b1e      	ldr	r3, [pc, #120]	; (8002970 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028f6:	623b      	str	r3, [r7, #32]
      break;
 80028f8:	e02d      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	0c9b      	lsrs	r3, r3, #18
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002906:	4413      	add	r3, r2
 8002908:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800290c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d013      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002918:	4b14      	ldr	r3, [pc, #80]	; (800296c <HAL_RCC_GetSysClockFreq+0xb8>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	0c5b      	lsrs	r3, r3, #17
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002926:	4413      	add	r3, r2
 8002928:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800292c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	4a0f      	ldr	r2, [pc, #60]	; (8002970 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002932:	fb02 f203 	mul.w	r2, r2, r3
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	fbb2 f3f3 	udiv	r3, r2, r3
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
 800293e:	e004      	b.n	800294a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	4a0c      	ldr	r2, [pc, #48]	; (8002974 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002944:	fb02 f303 	mul.w	r3, r2, r3
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	623b      	str	r3, [r7, #32]
      break;
 800294e:	e002      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002950:	4b09      	ldr	r3, [pc, #36]	; (8002978 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002952:	623b      	str	r3, [r7, #32]
      break;
 8002954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002956:	6a3b      	ldr	r3, [r7, #32]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3728      	adds	r7, #40	; 0x28
 800295c:	46bd      	mov	sp, r7
 800295e:	bc90      	pop	{r4, r7}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	0800386c 	.word	0x0800386c
 8002968:	0800387c 	.word	0x0800387c
 800296c:	40021000 	.word	0x40021000
 8002970:	00f42400 	.word	0x00f42400
 8002974:	003d0900 	.word	0x003d0900
 8002978:	007a1200 	.word	0x007a1200

0800297c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002984:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <RCC_Delay+0x34>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <RCC_Delay+0x38>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	0a5b      	lsrs	r3, r3, #9
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	fb02 f303 	mul.w	r3, r2, r3
 8002996:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002998:	bf00      	nop
  }
  while (Delay --);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1e5a      	subs	r2, r3, #1
 800299e:	60fa      	str	r2, [r7, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1f9      	bne.n	8002998 <RCC_Delay+0x1c>
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	20000038 	.word	0x20000038
 80029b4:	10624dd3 	.word	0x10624dd3

080029b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d07d      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80029d4:	2300      	movs	r3, #0
 80029d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d8:	4b4f      	ldr	r3, [pc, #316]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10d      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e4:	4b4c      	ldr	r3, [pc, #304]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	4a4b      	ldr	r2, [pc, #300]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ee:	61d3      	str	r3, [r2, #28]
 80029f0:	4b49      	ldr	r3, [pc, #292]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fc:	2301      	movs	r3, #1
 80029fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a00:	4b46      	ldr	r3, [pc, #280]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d118      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a0c:	4b43      	ldr	r3, [pc, #268]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a42      	ldr	r2, [pc, #264]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a18:	f7fe fa34 	bl	8000e84 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1e:	e008      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a20:	f7fe fa30 	bl	8000e84 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	; 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e06d      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a32:	4b3a      	ldr	r3, [pc, #232]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a3e:	4b36      	ldr	r3, [pc, #216]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d02e      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d027      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a5c:	4b2e      	ldr	r3, [pc, #184]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a66:	4b2e      	ldr	r3, [pc, #184]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a6c:	4b2c      	ldr	r3, [pc, #176]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a72:	4a29      	ldr	r2, [pc, #164]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d014      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a82:	f7fe f9ff 	bl	8000e84 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f7fe f9fb 	bl	8000e84 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e036      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0ee      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aac:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	4917      	ldr	r1, [pc, #92]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002abe:	7dfb      	ldrb	r3, [r7, #23]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d105      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac4:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	4a13      	ldr	r2, [pc, #76]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ace:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002adc:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	490b      	ldr	r1, [pc, #44]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d008      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002afa:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	4904      	ldr	r1, [pc, #16]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40007000 	.word	0x40007000
 8002b20:	42420440 	.word	0x42420440

08002b24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e076      	b.n	8002c24 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d108      	bne.n	8002b50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b46:	d009      	beq.n	8002b5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	61da      	str	r2, [r3, #28]
 8002b4e:	e005      	b.n	8002b5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fd ff60 	bl	8000a3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be0:	ea42 0103 	orr.w	r1, r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	0c1a      	lsrs	r2, r3, #16
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f002 0204 	and.w	r2, r2, #4
 8002c02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	69da      	ldr	r2, [r3, #28]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_SPI_TransmitReceive_DMA+0x20>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e0e3      	b.n	8002e14 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c5a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002c62:	7dbb      	ldrb	r3, [r7, #22]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d00d      	beq.n	8002c84 <HAL_SPI_TransmitReceive_DMA+0x58>
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c6e:	d106      	bne.n	8002c7e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d102      	bne.n	8002c7e <HAL_SPI_TransmitReceive_DMA+0x52>
 8002c78:	7dbb      	ldrb	r3, [r7, #22]
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d002      	beq.n	8002c84 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c82:	e0c2      	b.n	8002e0a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d005      	beq.n	8002c96 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d002      	beq.n	8002c96 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002c90:	887b      	ldrh	r3, [r7, #2]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d102      	bne.n	8002c9c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c9a:	e0b6      	b.n	8002e0a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d003      	beq.n	8002cb0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2205      	movs	r2, #5
 8002cac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	887a      	ldrh	r2, [r7, #2]
 8002cc6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	887a      	ldrh	r2, [r7, #2]
 8002cd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	887a      	ldrh	r2, [r7, #2]
 8002cd8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d108      	bne.n	8002d04 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf6:	4a49      	ldr	r2, [pc, #292]	; (8002e1c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8002cf8:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfe:	4a48      	ldr	r2, [pc, #288]	; (8002e20 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8002d00:	629a      	str	r2, [r3, #40]	; 0x28
 8002d02:	e007      	b.n	8002d14 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d08:	4a46      	ldr	r2, [pc, #280]	; (8002e24 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8002d0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d10:	4a45      	ldr	r2, [pc, #276]	; (8002e28 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8002d12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d18:	4a44      	ldr	r2, [pc, #272]	; (8002e2c <HAL_SPI_TransmitReceive_DMA+0x200>)
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d20:	2200      	movs	r2, #0
 8002d22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	330c      	adds	r3, #12
 8002d2e:	4619      	mov	r1, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d34:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d3a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002d3c:	f7fe fe04 	bl	8001948 <HAL_DMA_Start_IT>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00c      	beq.n	8002d60 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4a:	f043 0210 	orr.w	r2, r3, #16
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002d5e:	e054      	b.n	8002e0a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d74:	2200      	movs	r2, #0
 8002d76:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d84:	2200      	movs	r2, #0
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	4619      	mov	r1, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	330c      	adds	r3, #12
 8002da0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002da6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002da8:	f7fe fdce 	bl	8001948 <HAL_DMA_Start_IT>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00c      	beq.n	8002dcc <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db6:	f043 0210 	orr.w	r2, r3, #16
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002dca:	e01e      	b.n	8002e0a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd6:	2b40      	cmp	r3, #64	; 0x40
 8002dd8:	d007      	beq.n	8002dea <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002de8:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 0220 	orr.w	r2, r2, #32
 8002df8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 0202 	orr.w	r2, r2, #2
 8002e08:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	08002fad 	.word	0x08002fad
 8002e20:	08002e79 	.word	0x08002e79
 8002e24:	08002fc9 	.word	0x08002fc9
 8002e28:	08002f1f 	.word	0x08002f1f
 8002e2c:	08002fe5 	.word	0x08002fe5

08002e30 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bc80      	pop	{r7}
 8002e40:	4770      	bx	lr

08002e42 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr

08002e54 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr

08002e66 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e86:	f7fd fffd 	bl	8000e84 <HAL_GetTick>
 8002e8a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	2b20      	cmp	r3, #32
 8002e98:	d03b      	beq.n	8002f12 <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0220 	bic.w	r2, r2, #32
 8002ea8:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10d      	bne.n	8002ece <SPI_DMAReceiveCplt+0x56>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eba:	d108      	bne.n	8002ece <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0203 	bic.w	r2, r2, #3
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	e007      	b.n	8002ede <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0201 	bic.w	r2, r2, #1
 8002edc:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	2164      	movs	r1, #100	; 0x64
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f926 	bl	8003134 <SPI_EndRxTransaction>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f7ff ffab 	bl	8002e66 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002f10:	e002      	b.n	8002f18 <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f7ff ff8c 	bl	8002e30 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f2c:	f7fd ffaa 	bl	8000e84 <HAL_GetTick>
 8002f30:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	d02f      	beq.n	8002fa0 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0220 	bic.w	r2, r2, #32
 8002f4e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	2164      	movs	r1, #100	; 0x64
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 f93f 	bl	80031d8 <SPI_EndRxTxTransaction>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f64:	f043 0220 	orr.w	r2, r3, #32
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0203 	bic.w	r2, r2, #3
 8002f7a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f7ff ff64 	bl	8002e66 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002f9e:	e002      	b.n	8002fa6 <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f7fd fb01 	bl	80005a8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f7ff ff41 	bl	8002e42 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002fc0:	bf00      	nop
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f7ff ff3c 	bl	8002e54 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002fdc:	bf00      	nop
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0203 	bic.w	r2, r2, #3
 8003000:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003006:	f043 0210 	orr.w	r2, r3, #16
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f7ff ff25 	bl	8002e66 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800301c:	bf00      	nop
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	4613      	mov	r3, r2
 8003032:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003034:	f7fd ff26 	bl	8000e84 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303c:	1a9b      	subs	r3, r3, r2
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	4413      	add	r3, r2
 8003042:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003044:	f7fd ff1e 	bl	8000e84 <HAL_GetTick>
 8003048:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800304a:	4b39      	ldr	r3, [pc, #228]	; (8003130 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	015b      	lsls	r3, r3, #5
 8003050:	0d1b      	lsrs	r3, r3, #20
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	fb02 f303 	mul.w	r3, r2, r3
 8003058:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800305a:	e054      	b.n	8003106 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003062:	d050      	beq.n	8003106 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003064:	f7fd ff0e 	bl	8000e84 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	69fa      	ldr	r2, [r7, #28]
 8003070:	429a      	cmp	r2, r3
 8003072:	d902      	bls.n	800307a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d13d      	bne.n	80030f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003088:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003092:	d111      	bne.n	80030b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800309c:	d004      	beq.n	80030a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a6:	d107      	bne.n	80030b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c0:	d10f      	bne.n	80030e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e017      	b.n	8003126 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	3b01      	subs	r3, #1
 8003104:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	4013      	ands	r3, r2
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	429a      	cmp	r2, r3
 8003114:	bf0c      	ite	eq
 8003116:	2301      	moveq	r3, #1
 8003118:	2300      	movne	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	429a      	cmp	r2, r3
 8003122:	d19b      	bne.n	800305c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3720      	adds	r7, #32
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20000038 	.word	0x20000038

08003134 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af02      	add	r7, sp, #8
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003148:	d111      	bne.n	800316e <SPI_EndRxTransaction+0x3a>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003152:	d004      	beq.n	800315e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315c:	d107      	bne.n	800316e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800316c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003176:	d117      	bne.n	80031a8 <SPI_EndRxTransaction+0x74>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003180:	d112      	bne.n	80031a8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2200      	movs	r2, #0
 800318a:	2101      	movs	r1, #1
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f7ff ff49 	bl	8003024 <SPI_WaitFlagStateUntilTimeout>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01a      	beq.n	80031ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319c:	f043 0220 	orr.w	r2, r3, #32
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e013      	b.n	80031d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2200      	movs	r2, #0
 80031b0:	2180      	movs	r1, #128	; 0x80
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f7ff ff36 	bl	8003024 <SPI_WaitFlagStateUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d007      	beq.n	80031ce <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c2:	f043 0220 	orr.w	r2, r3, #32
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e000      	b.n	80031d0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af02      	add	r7, sp, #8
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2200      	movs	r2, #0
 80031ec:	2180      	movs	r1, #128	; 0x80
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f7ff ff18 	bl	8003024 <SPI_WaitFlagStateUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d007      	beq.n	800320a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fe:	f043 0220 	orr.w	r2, r3, #32
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e000      	b.n	800320c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e041      	b.n	80032aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d106      	bne.n	8003240 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7fd fd7e 	bl	8000d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3304      	adds	r3, #4
 8003250:	4619      	mov	r1, r3
 8003252:	4610      	mov	r0, r2
 8003254:	f000 f9ba 	bl	80035cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d001      	beq.n	80032cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e044      	b.n	8003356 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a1d      	ldr	r2, [pc, #116]	; (8003360 <HAL_TIM_Base_Start_IT+0xac>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d018      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x6c>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a1c      	ldr	r2, [pc, #112]	; (8003364 <HAL_TIM_Base_Start_IT+0xb0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d013      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x6c>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003300:	d00e      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x6c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a18      	ldr	r2, [pc, #96]	; (8003368 <HAL_TIM_Base_Start_IT+0xb4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d009      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x6c>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a16      	ldr	r2, [pc, #88]	; (800336c <HAL_TIM_Base_Start_IT+0xb8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d004      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x6c>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a15      	ldr	r2, [pc, #84]	; (8003370 <HAL_TIM_Base_Start_IT+0xbc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d111      	bne.n	8003344 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2b06      	cmp	r3, #6
 8003330:	d010      	beq.n	8003354 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0201 	orr.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003342:	e007      	b.n	8003354 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr
 8003360:	40012c00 	.word	0x40012c00
 8003364:	40013400 	.word	0x40013400
 8003368:	40000400 	.word	0x40000400
 800336c:	40000800 	.word	0x40000800
 8003370:	40000c00 	.word	0x40000c00

08003374 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b02      	cmp	r3, #2
 8003388:	d122      	bne.n	80033d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b02      	cmp	r3, #2
 8003396:	d11b      	bne.n	80033d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0202 	mvn.w	r2, #2
 80033a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f8ed 	bl	8003596 <HAL_TIM_IC_CaptureCallback>
 80033bc:	e005      	b.n	80033ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f8e0 	bl	8003584 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f8ef 	bl	80035a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d122      	bne.n	8003424 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d11b      	bne.n	8003424 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f06f 0204 	mvn.w	r2, #4
 80033f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2202      	movs	r2, #2
 80033fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f8c3 	bl	8003596 <HAL_TIM_IC_CaptureCallback>
 8003410:	e005      	b.n	800341e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f8b6 	bl	8003584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f8c5 	bl	80035a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b08      	cmp	r3, #8
 8003430:	d122      	bne.n	8003478 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b08      	cmp	r3, #8
 800343e:	d11b      	bne.n	8003478 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0208 	mvn.w	r2, #8
 8003448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2204      	movs	r2, #4
 800344e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f899 	bl	8003596 <HAL_TIM_IC_CaptureCallback>
 8003464:	e005      	b.n	8003472 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f88c 	bl	8003584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f89b 	bl	80035a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0310 	and.w	r3, r3, #16
 8003482:	2b10      	cmp	r3, #16
 8003484:	d122      	bne.n	80034cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b10      	cmp	r3, #16
 8003492:	d11b      	bne.n	80034cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0210 	mvn.w	r2, #16
 800349c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2208      	movs	r2, #8
 80034a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f86f 	bl	8003596 <HAL_TIM_IC_CaptureCallback>
 80034b8:	e005      	b.n	80034c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f862 	bl	8003584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f871 	bl	80035a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d10e      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d107      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0201 	mvn.w	r2, #1
 80034f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7fd f884 	bl	8000600 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003502:	2b80      	cmp	r3, #128	; 0x80
 8003504:	d10e      	bne.n	8003524 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003510:	2b80      	cmp	r3, #128	; 0x80
 8003512:	d107      	bne.n	8003524 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800351c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f943 	bl	80037aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352e:	2b40      	cmp	r3, #64	; 0x40
 8003530:	d10e      	bne.n	8003550 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353c:	2b40      	cmp	r3, #64	; 0x40
 800353e:	d107      	bne.n	8003550 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f835 	bl	80035ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	2b20      	cmp	r3, #32
 800355c:	d10e      	bne.n	800357c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b20      	cmp	r3, #32
 800356a:	d107      	bne.n	800357c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f06f 0220 	mvn.w	r2, #32
 8003574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f90e 	bl	8003798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800357c:	bf00      	nop
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr

08003596 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr

080035a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr

080035ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bc80      	pop	{r7}
 80035ca:	4770      	bx	lr

080035cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a33      	ldr	r2, [pc, #204]	; (80036ac <TIM_Base_SetConfig+0xe0>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d013      	beq.n	800360c <TIM_Base_SetConfig+0x40>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a32      	ldr	r2, [pc, #200]	; (80036b0 <TIM_Base_SetConfig+0xe4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00f      	beq.n	800360c <TIM_Base_SetConfig+0x40>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f2:	d00b      	beq.n	800360c <TIM_Base_SetConfig+0x40>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a2f      	ldr	r2, [pc, #188]	; (80036b4 <TIM_Base_SetConfig+0xe8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d007      	beq.n	800360c <TIM_Base_SetConfig+0x40>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a2e      	ldr	r2, [pc, #184]	; (80036b8 <TIM_Base_SetConfig+0xec>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d003      	beq.n	800360c <TIM_Base_SetConfig+0x40>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a2d      	ldr	r2, [pc, #180]	; (80036bc <TIM_Base_SetConfig+0xf0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d108      	bne.n	800361e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a22      	ldr	r2, [pc, #136]	; (80036ac <TIM_Base_SetConfig+0xe0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <TIM_Base_SetConfig+0x82>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a21      	ldr	r2, [pc, #132]	; (80036b0 <TIM_Base_SetConfig+0xe4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00f      	beq.n	800364e <TIM_Base_SetConfig+0x82>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003634:	d00b      	beq.n	800364e <TIM_Base_SetConfig+0x82>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a1e      	ldr	r2, [pc, #120]	; (80036b4 <TIM_Base_SetConfig+0xe8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d007      	beq.n	800364e <TIM_Base_SetConfig+0x82>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a1d      	ldr	r2, [pc, #116]	; (80036b8 <TIM_Base_SetConfig+0xec>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d003      	beq.n	800364e <TIM_Base_SetConfig+0x82>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a1c      	ldr	r2, [pc, #112]	; (80036bc <TIM_Base_SetConfig+0xf0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d108      	bne.n	8003660 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a09      	ldr	r2, [pc, #36]	; (80036ac <TIM_Base_SetConfig+0xe0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d003      	beq.n	8003694 <TIM_Base_SetConfig+0xc8>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a08      	ldr	r2, [pc, #32]	; (80036b0 <TIM_Base_SetConfig+0xe4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d103      	bne.n	800369c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	615a      	str	r2, [r3, #20]
}
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr
 80036ac:	40012c00 	.word	0x40012c00
 80036b0:	40013400 	.word	0x40013400
 80036b4:	40000400 	.word	0x40000400
 80036b8:	40000800 	.word	0x40000800
 80036bc:	40000c00 	.word	0x40000c00

080036c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e050      	b.n	800377a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a1b      	ldr	r2, [pc, #108]	; (8003784 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d018      	beq.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a19      	ldr	r2, [pc, #100]	; (8003788 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d013      	beq.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372e:	d00e      	beq.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a15      	ldr	r2, [pc, #84]	; (800378c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d009      	beq.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a14      	ldr	r2, [pc, #80]	; (8003790 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d004      	beq.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a12      	ldr	r2, [pc, #72]	; (8003794 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d10c      	bne.n	8003768 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003754:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	4313      	orrs	r3, r2
 800375e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr
 8003784:	40012c00 	.word	0x40012c00
 8003788:	40013400 	.word	0x40013400
 800378c:	40000400 	.word	0x40000400
 8003790:	40000800 	.word	0x40000800
 8003794:	40000c00 	.word	0x40000c00

08003798 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr

080037aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr

080037bc <__libc_init_array>:
 80037bc:	b570      	push	{r4, r5, r6, lr}
 80037be:	2500      	movs	r5, #0
 80037c0:	4e0c      	ldr	r6, [pc, #48]	; (80037f4 <__libc_init_array+0x38>)
 80037c2:	4c0d      	ldr	r4, [pc, #52]	; (80037f8 <__libc_init_array+0x3c>)
 80037c4:	1ba4      	subs	r4, r4, r6
 80037c6:	10a4      	asrs	r4, r4, #2
 80037c8:	42a5      	cmp	r5, r4
 80037ca:	d109      	bne.n	80037e0 <__libc_init_array+0x24>
 80037cc:	f000 f822 	bl	8003814 <_init>
 80037d0:	2500      	movs	r5, #0
 80037d2:	4e0a      	ldr	r6, [pc, #40]	; (80037fc <__libc_init_array+0x40>)
 80037d4:	4c0a      	ldr	r4, [pc, #40]	; (8003800 <__libc_init_array+0x44>)
 80037d6:	1ba4      	subs	r4, r4, r6
 80037d8:	10a4      	asrs	r4, r4, #2
 80037da:	42a5      	cmp	r5, r4
 80037dc:	d105      	bne.n	80037ea <__libc_init_array+0x2e>
 80037de:	bd70      	pop	{r4, r5, r6, pc}
 80037e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037e4:	4798      	blx	r3
 80037e6:	3501      	adds	r5, #1
 80037e8:	e7ee      	b.n	80037c8 <__libc_init_array+0xc>
 80037ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037ee:	4798      	blx	r3
 80037f0:	3501      	adds	r5, #1
 80037f2:	e7f2      	b.n	80037da <__libc_init_array+0x1e>
 80037f4:	08003890 	.word	0x08003890
 80037f8:	08003890 	.word	0x08003890
 80037fc:	08003890 	.word	0x08003890
 8003800:	08003894 	.word	0x08003894

08003804 <memset>:
 8003804:	4603      	mov	r3, r0
 8003806:	4402      	add	r2, r0
 8003808:	4293      	cmp	r3, r2
 800380a:	d100      	bne.n	800380e <memset+0xa>
 800380c:	4770      	bx	lr
 800380e:	f803 1b01 	strb.w	r1, [r3], #1
 8003812:	e7f9      	b.n	8003808 <memset+0x4>

08003814 <_init>:
 8003814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003816:	bf00      	nop
 8003818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381a:	bc08      	pop	{r3}
 800381c:	469e      	mov	lr, r3
 800381e:	4770      	bx	lr

08003820 <_fini>:
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	bf00      	nop
 8003824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003826:	bc08      	pop	{r3}
 8003828:	469e      	mov	lr, r3
 800382a:	4770      	bx	lr
